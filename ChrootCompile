#!/bin/sh -e

CompileConfDir=/System/Settings/Compile

if [ "$1" == "--repack" ]
then
   cd Bootstrap
   for i in Compile Scripts
   do
      [ -d $i ] && rm -rf $i
      rm $i--*
      CreatePackage --no-sign $i
      aunpack $i--*
   done
   cd -
   shift
fi

base_dependencies=(
   "Glibc"
    "Ncurses" # needed by Bash
    "Readline" # needed by Bash
#    "GPM" # needed by Bash (FIXME)
   "Bash"
    "CoreUtils" # needed by Scripts (cp...)
    "Sed" # needed by Scripts
     "PCRE" # needed by Grep
    "Grep" # needed by Scripts
    "Python" # needed by Scripts
#     "OpenSSL" # needed by Wget
#    "Wget" # needed by Compile
    "Gawk" # needed by Compile
    "FindUtils" # needed by Compile (find)
     "Bzip2" # needed by Atool
     "Gzip" # needed by Atool
     "Tar" # needed by Atool
     "Perl" # needed by Atool
    "Atool" # needed by Compile
     "ZLib" # needed by File
    "File" # needed by Scripts
    "MkTemp" # needed by Scripts
    "Mtail" # needed by Scripts
    "BinUtils" # needed by GCC (as)
#    "Linux" # needed by GCC (include/linux)
    "Linux-Libc-Headers" # instead of Linux
   "GCC"
    "Sudo" # needed by Scripts
    "Make" # needed by Compile
     "E2FSProgs" # needed by Util-Linux (libblkid.so)
    "Util-Linux" # needed by Compile (mount)
    "DiffUtils" # needed by Compile (diff)
   "Scripts"
   "Compile"
)

export LANG=C
export LC_ALL=C

recipedir="$1"
if ! [ -d "$1" -o -f "$1/Recipe" ]
then
   echo "Expected recipe directory as a parameter (example: Recipes/Bash/3.0)"
   exit 1
fi
name=$(basename $(dirname $recipedir))
version=$(basename $recipedir)
arch=`uname -m`

echo "ChrootCompile: Compiling $name $version..."

cleanup() {
   echo "ChrootCompile: Will unmount /dev..."
   sudo umount $root/System/Kernel/Devices || true
   echo "ChrootCompile: Will unmount /proc..."
   sudo umount $root/System/Kernel/Status || true
   echo "ChrootCompile: Will unmount Archives..."
   sudo umount $root/Files/Compile/Archives || true
   mount | grep "$root" | awk '{ print $1 }' | while read mp
   do 
      echo "ChrootCompile: Will unmount $mp..."
      sudo umount $mp
   done
}

root=Area

cleanup

#sudo rm -rf $root

mkdir -p $root
mkdir -p $root/System/Links/Executables
mkdir -p $root/System/Links/Environment
mkdir -p $root/System/Links/Libraries
mkdir -p $root/System/Links/Headers
mkdir -p $root/System/Links/Manuals
mkdir -p $root/System/Links/Shared
mkdir -p $root/System/Links/Tasks
mkdir -p $root/System/Settings
mkdir -p $root/System/Variable
mkdir -p $root/System/Variable/tmp
mkdir -p $root/System/Kernel
mkdir -p $root/System/Kernel/Boot
mkdir -p $root/System/Kernel/Objects
mkdir -p $root/System/Kernel/Modules
mkdir -p $root/System/Kernel/Devices
mkdir -p $root/System/Kernel/Status
mkdir -p $root/Users
mkdir -p $root/Users/root
mkdir -p $root/Files
mkdir -p $root/Files/Compile
mkdir -p $root/Files/Compile/Archives
mkdir -p $root/Mount
mkdir -p $root/Programs
mkdir -p $root/usr

ln -nfs /System/Kernel/Objects $root/sys
ln -nfs /System/Kernel/Devices $root/dev
ln -nfs /System/Kernel/Status $root/proc
ln -nfs /System/Variable $root/var
ln -nfs /System/Variable/tmp $root/tmp
ln -nfs /System/Links/Libraries $root/lib
ln -nfs /System/Settings $root/etc
ln -nfs /System/Links/Executables $root/bin
ln -nfs /System/Links/Executables $root/sbin

ln -nfs . $root/usr/X11R6
ln -nfs . $root/usr/local
ln -nfs /System/Links/Executables $root/usr/bin
ln -nfs /System/Links/Headers $root/usr/include
ln -nfs /System/Links/Libraries $root/usr/lib
ln -nfs /System/Links/Manuals $root/usr/man
ln -nfs /System/Links/Executables $root/usr/sbin
ln -nfs /System/Links/Shared $root/usr/share


cp -r Recipes $root/Files/Compile

for dep in "${base_dependencies[@]}"
do
   [ `ls Clean/$dep--* 2> /dev=null | wc -l` -gt 1 ] && {
      echo "More than one entry for $dep in Clean/ directory."
      exit 1
   } || true
   [ `ls Bootstrap/$dep--* 2> /dev/null | wc -l` -gt 1 ] && {
      echo "More than one entry for $dep in Bootstrap/ directory."
      exit 1
   } || true
   pkg=`ls Clean/$dep--* 2> /dev/null || true`
   [ ! "$pkg" ] && pkg=`ls Bootstrap/$dep--* 2> /dev/null | head -n 1`
   [ ! "$pkg" ] && {
      echo "Base dependency $dep could not be filled."
      exit 1
   }
   sudo $(dirname $0)/MiniInstallPackage "$pkg" "$root"
done

function sudo_rm_if_e() {
   if [ -e "$1" ]
   then
      echo "ChrootCompile: removing $1..."
      sudo rm -f "$1"
   else
      return 0
   fi
}

sudo_rm_if_e $root/System/Settings/passwd
cat <<EOF > $root/System/Settings/passwd
root:x:0:0:Gobo:/Users/root:/bin/bash
fibo:x:21:21:Fibo:/tmp:/bin/bash
EOF

sudo_rm_if_e $root/System/Settings/group
cat <<EOF > $root/System/Settings/group
root:x:0:root
fibo:x:21:fibo
EOF

sudo_rm_if_e $root/Programs/Sudo/Settings/sudoers
sudo chmod 777 $root/Programs/Sudo/Settings
cat <<EOF > $root/Programs/Sudo/Settings/sudoers
root ALL=(ALL) NOPASSWD: ALL
EOF
sudo chmod 755 $root/Programs/Sudo/Settings

sudo chmod 440 $root/Programs/Sudo/Settings/sudoers
sudo chown 0:0 $root/Programs/Sudo/Settings/sudoers
sudo_rm_if_e $root/System/Settings/sudoers
ln -nfs /Programs/Sudo/Settings/sudoers $root/System/Settings/sudoers
touch $root/System/Settings/fstab

cp /etc/resolv.conf $root/System/Settings/resolv.conf
cp /etc/hosts $root/System/Settings/hosts

sudo mount --bind /dev $root/System/Kernel/Devices
sudo mount --bind /proc $root/System/Kernel/Status
sudo mount --bind Archives $root/Files/Compile/Archives

trap cleanup TERM STOP HUP EXIT

(
   source "$CompileConfDir/Compile.conf"
   source "$1/Recipe"
   cd "$root/Files/Compile/Archives"
   if [ "$url" ]
   then
      file=`basename "$url"`
      [ ! -e "$file" ] && wget "$url"
   fi
   if [ "${urls[*]}" ]
   then
      for url in "${urls[@]}"
      do
         file=`basename "$url"`
         [ ! -e "$file" ] && wget "$url"
      done
   fi
)

export LD_LIBRARY_PATH=/System/Links/Libraries

echo "ChrootCompile: Will run ldconfig..."
sudo chroot $root ldconfig
echo "ChrootCompile: Will run Compile..."
sudo chroot $root Compile --no-web --no-sign $name $version
sudo chroot $root CreatePackage --no-sign --no-verify $name $version
cp $root/$name--$version--`uname -m`.tar.bz2 Clean


