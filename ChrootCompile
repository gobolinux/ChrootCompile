#!/bin/sh 
#-e

#############################################################################
# Current requirements for this script:
# - './BaseDependencies' directory from where ChrootCompile gets package to build
#   the compilation environment. Only one version per package should be 
#   stored here.
#
# Other directories:
# - './Recipes' directory containing all potentially required recipes.
#   Not needed if using --local-repository option
#
# - './Unpacked' directory which contains unpacked packages installed
#   within $root. Those unpacked dirs are binded within $root (instead
#   of simply copied or unpacked) in order to reduce preparation time.
#
# - './$getclean' directory where newly compiled packages are fetched.
# - './$putclean' directory where compiled packages are stored.
#   (These are usually the same (./Clean) but can be different for
#   debugging purposes.)
#
# - './Area' directory created at each run, which will contain a complete 
#    set of installed programs, required to compile something.
#
#############################################################################

function die() {
   echo "ChrootCompile: $*" >&2
   exit 1
}

#############################################################################
# Parsing options. By now, only 'chrootcompileCompileConf'
#############################################################################
scriptdir=$(readlink -f $(dirname $0))
source $scriptdir/ChrootCompile.conf
if [ ! "$goboPrograms" ]
then export goboPrograms=/Programs
fi
if [ "$UID" -ne 0 ]
then sudo=sudo
else sudo=
fi

#############################################################################
# '--local-repository' option: (to be used only on GoboLinux systems)
#############################################################################
unset localrepository
if [ "$1" == "--local-repository" -o "$1" == "-l" ]
then
    localrepository=yes
    shift
fi

unset crossopts
unset crossrepodir
unset crossprefixdir
unset crosskerneldir
unset crosstoolchaindir
if [ "$1" == "--cross-compile" -o "$1" == "-X" ]
then
    [ "$2" = "" ] && die "Expected architecture as a parameter."
    crossopts="--cross-compile $2"
    crossconf=`ls BaseDependencies/Compile/*/Resources/Defaults/Settings/Compile/Cross/Cross-$2.conf`

    [ ! -f $crossconf ] && die "$crossconf: file not found."
    eval `cat $crossconf | grep "cross_prefix_dir=" | sed 's/"//g'`
    eval `cat $crossconf | grep "cross_kernel_dir=" | sed 's/"//g'`
    eval `cat $crossconf | grep "cross_toolchain_dir=" | sed 's/"//g'`
    eval `cat $crossconf | grep "cross_uname_m=" | sed 's/"//g'`
    crossprefixdir=$cross_prefix_dir
    crosskerneldir=$cross_kernel_dir
    crosstoolchaindir=$cross_toolchain_dir
    crossrepodir="$crossprefixdir/$goboPrograms"
    arch=$cross_uname_m

    case "$arch" in
       arm*) recipesubdir=arm ;;
       *)    recipesubdir="$cross_uname_m"
    esac

    shift 2
else
    arch=`uname -m`
    case "$arch" in
       i686|i585|i486|i386) recipesubdir=i686 ;;
       *)                   recipesubdir="$arch"
    esac
fi

unset verbose
if [ "$1" == "--verbose" -o "$1" == "-v" ]
then
    verbose="$1"
    shift
fi

if [ "$1" == "--help" ]
then
    echo "Usage: $0 [options] <recipe dir>"
    echo " "
    echo "Available options are:"
    echo "  -l, --local-repository:     use the repository at /Files/Compile (GoboLinux only)"
    echo "  -X, --cross-compile <arch>: cross-compile to 'arch' (GoboLinux only)"
    echo "  -v, --verbose:              verbose output"
    exit 0
fi

#############################################################################
# Which packages are required to run Compile
#############################################################################
base_dependencies=(
    "Linux-Headers" # needed to bootstrap Glibc
    "Glibc"
    "Ncurses" # needed by Bash
    "Readline" # needed by Bash
    "Bash"
    "CoreUtils" # needed by Scripts (cp...)
    "Sed" # needed by Scripts
    "PCRE" # needed by Grep
    "Grep" # needed by Scripts
    "Python" # needed by Scripts
    "Gawk" # needed by Compile
    "FindUtils" # needed by Compile (find)
    "Bzip2" # needed by Atool
    "Gzip" # needed by Atool
    "Tar" # needed by Atool
    "Perl" # needed by Atool
    "Atool" # needed by Compile
    "ZLib" # needed by File
    "File" # needed by Scripts
    "MkTemp" # needed by Scripts
    "Mtail" # needed by Scripts
    "BinUtils" # needed by GCC (as)
    "GCC"
    "Sudo" # needed by Scripts
    "Make" # needed by Compile
    "Patch" # needed by Compile
    "E2FSProgs" # needed by Util-Linux (libblkid.so)
    "Util-Linux" # needed by Compile (mount)
    "DiffUtils" # needed by Compile (diff)
    "Texinfo" # needed by packages that generate info pages (makeinfo)
    "Scripts"
    "Compile"
)

export LANG=C
export LC_ALL=C


if [ -d "$1" -a -f "$1/Recipe" ]
then
   recipedir="$1"
   name=$(basename $(dirname $recipedir))
   version=$(basename $recipedir)
else
   die "Expected recipe directory as a parameter (example: Recipes/Bash/3.0)"
fi

echo "ChrootCompile: Compiling $name $version..."

#############################################################################
# Preparing stub root directory
#############################################################################
root=$PWD/Area-$name-$version
getclean=Clean
putclean=Clean

echo "ChrootCompile: Preparing $root..."

#############################################################################
# Setting signal handlers (cleanup before exit if interrupted)
#############################################################################

function unmount_dir() {
   [ "$verbose" ] && echo "ChrootCompile: Will unmount $point..."
   $sudo umount $1 2>&1 | grep -v "not mounted" /dev/null || true
}

function cleanup() {
   unset LANG LC_ALL
   for point in $root/Files/Compile/Archives $root/Files/Compile $crossprefixdir $crosstoolchaindir $crosskerneldir
   do
      unmount_dir $point
   done
   mount | grep "$root" | awk '{ print $3 }' | while read mp
   do 
      unmount_dir $mp
   done
}

trap cleanup TERM STOP HUP EXIT

cleanup

if [ -d "$root" ]
then
   date=`date +%Y%m%d-%H%M`
   echo "Backing up old $root to $root-old-$date."
   $sudo mv $root $root-old-$date
fi

mkdir -p $root
mkdir -p $root/System/Links/Executables
mkdir -p $root/System/Links/Environment
mkdir -p $root/System/Links/Libraries
mkdir -p $root/System/Links/Headers
mkdir -p $root/System/Links/Manuals
mkdir -p $root/System/Links/Shared
mkdir -p $root/System/Links/Tasks
mkdir -p $root/System/Settings
mkdir -p $root/System/Variable
mkdir -p $root/System/Variable/tmp
mkdir -p $root/System/Variable/log
mkdir -p $root/System/Kernel
mkdir -p $root/System/Kernel/Boot
mkdir -p $root/System/Kernel/Objects
mkdir -p $root/System/Kernel/Modules
mkdir -p $root/System/Kernel/Devices
mkdir -p $root/System/Kernel/Status
mkdir -p $root/Users
mkdir -p $root/Users/root
mkdir -p $root/Files
mkdir -p $root/Files/Compile
mkdir -p $root/Files/Compile/Archives
mkdir -p $root/Mount
mkdir -p $root/$goboPrograms
mkdir -p $root/usr

mkdir -p $root/Depot/LocalPackages
mkdir -p $root/Depot/$getclean

ln -nfs /System/Kernel/Objects $root/sys
ln -nfs /System/Kernel/Devices $root/dev
ln -nfs /System/Kernel/Status $root/proc
ln -nfs /System/Variable $root/var
ln -nfs /System/Variable/tmp $root/tmp
ln -nfs /System/Links/Libraries $root/lib
ln -nfs /System/Settings $root/etc
ln -nfs /System/Links/Executables $root/bin
ln -nfs /System/Links/Executables $root/sbin

ln -nfs . $root/usr/X11R6
ln -nfs . $root/usr/local
ln -nfs /System/Links/Executables $root/usr/bin
ln -nfs /System/Links/Headers $root/usr/include
ln -nfs /System/Links/Libraries $root/usr/lib
ln -nfs /System/Links/Manuals $root/usr/man
ln -nfs /System/Links/Executables $root/usr/sbin
ln -nfs /System/Links/Shared $root/usr/share

chmod 777 $root/System/Variable/tmp # Fibo also wants to write temp files

#############################################################################
# Copying recipes to root directory
#############################################################################
if [ "$localrepository" ]
then
    [ "$verbose" ] && echo "ChrootCompile: bind-mounting /Files/Compile inside $root"
    $sudo mount --bind /Files/Compile $root/Files/Compile

    if [ ! -z "$crosskerneldir" ]
    then
        [ "$verbose" ] && echo "ChrootCompile: bind-mounting $crosskerneldir inside $root"
        mkdir -p $root/$crosskerneldir
        $sudo mount --bind $crosskerneldir $root/$crosskerneldir
    fi
fi

if [ -d Recipes ]
then
   cp -rL Recipes $root/Files/Compile
else
   echo "Warning, ./Recipes not found. Skipping copy of recipes inside $root"
fi

#############################################################################
# Packing CVS versions of the tools
#############################################################################

arch=i686
today=`date +%Y%m%d`
tools="Scripts Compile"
localcvs="."
for package in $tools 
do
   tarball=BaseDependencies/$package--$today--$arch.tar.bz2
   if [ ! -e "$tarball" -o "`find "$localcvs/tools/$package/" -newer "$tarball" 2> /dev/null`" ] 
   then
      echo "Packing $package CVS snapshot..."
      rm -rf $package                    # only required if there are leftovers from a previous execution
      mkdir -p $package
      cp -a $localcvs/tools/$package $package/$today
      # we need to build here in order to create the files which are going to be linked inside BuildRoot
      [ -e $package/$today/Makefile ] && echo Building $package/$today && make -C $package/$today > /dev/null 
      find $package/$today/ -type d -name CVS | xargs rm -rf 
      rm -f BaseDependencies/$package--*--$arch.tar.bz2   # cleaning up old versions too
      tar cjpf $tarball $package/$today  # create the package
      rm -rf $package
      toolswhichneedmake="$toolswhichneedmake $package"
   else
      echo "Don't repacking $package CVS snapshot..."
   fi
done

#############################################################################
# Getting packages for BaseDependencies - Temporary only
#############################################################################

[ -d Unpacked ] || mkdir Unpacked
[ -d Unpacked/_Checksums ] || mkdir Unpacked/_Checksums

# function get_package_for() {
#    for dir in Clean BaseDependencies; do
#       if ls $dir/$1--* &> /dev/null
#       
#    done
# }

[ -d BaseDependencies ] || mkdir BaseDependencies
[ -d $getclean ] || mkdir $getclean
for dep in "${base_dependencies[@]}"
do
   if ! ls BaseDependencies/$dep--* &> /dev/null && ! ls $getclean/$dep--* &> /dev/null && ! ls LocalPackages/$dep--* &> /dev/null \
   && ! [ -d BaseDependencies/$dep -o -d $getclean/$dep -o -d LocalPackages/$dep ]
   then
      die "Package $dep, needed for bootstrap, was not found."
   fi
done

#############################################################################
# Installing base packages inside root directory
#############################################################################
echo "ChrootCompile: Installing base packages inside $root..."

function filter_dir() {
   grep -v Settings | grep -v Variable | grep -v Current
}

function get_package_for() {
   local dep="$1"
   local pkg=
   if [ "$crossopts" ]
   then local repositories="BaseDependencies"
   else local repositories="$getclean BaseDependencies"
   fi
   for repo in $repositories
   do
      [ `ls $repo/$dep--* 2> /dev/null | wc -l` -gt 1 ] && {
         die "More than one entry for $dep in $repo/ directory."
      } || true
      pkg=`ls $repo/$dep--* 2> /dev/null || true`
      [ "$pkg" ] && break
   done
   echo "$pkg"
}

function unpack_package() {
   local pkg="$1"
   local dep="$2"

   packagemd5=`md5sum $pkg`

   [ `ls $repo/$dep 2> /dev/null | filter_dir | wc -l` -gt 1 ] && rm -rf "Unpacked/$dep" || true

   if [ "`cat Unpacked/_Checksums/$dep 2> /dev/null`" !=  "$packagemd5" ]
   then
      # We may enter here even if "Unpacked/$dep" does not exists. Notice the '-f' of rm.
      # cleanup old md5 file
      rm -f Unpacked/_Checksums/$dep
      # remove the installed package: $package was updated 
      rm -rf "Unpacked/$dep"
   fi

   unpacked=`ls -d Unpacked/$dep/* 2> /dev/null | filter_dir || true`
   if [ ! "$unpacked" ]
   then
      echo "Unpacking $pkg..." >&2
      tar xfj "$pkg" -C Unpacked 
      unpacked=`ls -d Unpacked/$dep/* 2> /dev/null | filter_dir`
      [ "$unpacked" ] || die "Error unpacking $pkg"
   fi
   echo "$packagemd5" > Unpacked/_Checksums/$dep
   echo "$unpacked"
}

function load_dependency() {
   local dep="$1"
   local pkg=`get_package_for $dep`
   [ ! "$pkg" ] && {
      [ "$crossopts" -a -d "$crossrepodir/$dep" ] && {
         [ "$verbose" ] && echo "ChrootCompile: Dependency $dep found at $crossrepodir/$dep"
         continue
      }
      die "Dependency $dep could not be found."
   }
   unpacked=`unpack_package "$pkg" "$dep"`

   if [ $dep = $name ]
   then realcopy="--real-copy"
   else realcopy=""
   fi
   $sudo $scriptdir/MiniInstallPackage $realcopy $verbose "$unpacked" "$root"
}

deps=`{
   echo "${base_dependencies[*]} " | tr " " "\n" 
   [ -e "$1/Resources/Dependencies" ] && cut -d" " -f1 "$1/Resources/Dependencies"
   [ -e "$1/Resources/BuildDependencies" ] && cut -d" " -f1 "$1/Resources/BuildDependencies"
} | sort -u | strings -n 1`

needsprocessing="yes" 
while [ $needsprocessing = "yes" ]
do
   needsprocessing="no"
   for dep in $deps
   do
      [ -d $root/$goboPrograms/$dep ] && continue
      echo Installing \"$dep\"...
      load_dependency "$dep"

      # if just loaded dependency has a Dependencies file...
      if [ -e $root/$goboPrograms/$dep/Current/Resources/Dependencies ]
      then
         # for each program at dependencies list (no version handling)...
         for i in `cat $root/$goboPrograms/$dep/Current/Resources/Dependencies | cut -f1 -d' '`
         do
            # if the program is not already at dependencies list, append it and force extra recursion
            if [ ! "`echo $deps | grep -w  $i`" -a "$i" != '#' ]
            then
               echo "  Adding dependency $i"
               deps="$deps $i"
               needsprocessing="yes"
            fi
         done
      fi
   done
done

#############################################################################
# Creating files at $root/System/Settings/ 
# => passwd, group, sudoers, resolv.conf, hosts, fstab
#############################################################################
[ "$verbose" ] && echo "ChrootCompile: Creating files at /System/Settings..."

function sudo_rm_if_e() {
   if [ -e "$1" ]
   then
      [ "$verbose" ] && echo "ChrootCompile: removing $1..."
      $sudo rm -f "$1"
   else
      return 0
   fi
}

sudo_rm_if_e $root/System/Settings/passwd
cat <<EOF > $root/System/Settings/passwd
root:x:0:0:Gobo:/Users/root:/bin/bash
fibo:x:21:21:Fibo:/tmp:/bin/bash
EOF

sudo_rm_if_e $root/System/Settings/group
cat <<EOF > $root/System/Settings/group
root:x:0:root
sys:x:2:root
tty:x:4:
fibo:x:21:fibo
EOF

sudo_rm_if_e $root/$goboPrograms/Sudo/Settings/sudoers
sudo chmod 777 $root/$goboPrograms/Sudo/Settings
cat <<EOF > $root/$goboPrograms/Sudo/Settings/sudoers
root ALL=(ALL) NOPASSWD: ALL
EOF
sudo chmod 755 $root/$goboPrograms/Sudo/Settings

$sudo chmod 440 $root/$goboPrograms/Sudo/Settings/sudoers
$sudo chown 0:0 $root/$goboPrograms/Sudo/Settings/sudoers
sudo_rm_if_e $root/System/Settings/sudoers
ln -nfs /$goboPrograms/Sudo/Settings/sudoers $root/System/Settings/sudoers
touch $root/System/Settings/fstab

# This should limit network access inside the chroot
#cp /etc/resolv.conf $root/System/Settings/resolv.conf
#cp /etc/hosts $root/System/Settings/hosts

#############################################################################
# Binding /dev, /proc and ./Archives inside root directory
#############################################################################
$sudo mount --bind /dev $root/System/Kernel/Devices
$sudo mount --bind /proc $root/System/Kernel/Status

[ -d ./Archives ] || mkdir ./Archives
[ ! "$localrepository" ] && $sudo mount --bind Archives $root/Files/Compile/Archives

$sudo mount --bind LocalPackages $root/Depot/LocalPackages
$sudo mount --bind $getclean $root/Depot/$getclean

if [ "$crossopts" ]
then
    mkdir -p $root/$crossprefixdir
    mkdir -p $root/$crosstoolchaindir
    $sudo mount --bind $crossprefixdir $root/$crossprefixdir
    $sudo mount --bind $crosstoolchaindir $root/$crosstoolchaindir
fi

#############################################################################
# Download required archives to ./Archives
#############################################################################

function fetch_included_recipes() {
   local ipkg="$2"
   local ver="$3"
   local recipedirs="$1/../../"

   if [ "$localrepository" ]
   then
       recipedirs[0]=/Files/Compile/LocalRecipes
       recipedirs[1]=/Files/Compile/Recipes
   fi

   for dir in ${recipedirs[@]}
   do
      pushd "$dir" &> /dev/null
      pkg=`ls | grep -i "^$ipkg$"`
      popd &> /dev/null
      [ ! "$pkg" ] && continue
      fetch_archive_off_recipe "$dir/$pkg/$ver" && return || die
   done
   die "Can't find recipe for $ipkg"
}

function fetch_archive_off_recipe() {
   (
      if wget --help | grep -q no-check-certificate
      then local wget="wget --no-check-certificate"
      else local wget="wget"
      fi
      unset is_meta
      unset include
      [ "$verbose" ] && echo "Fetching files for $1/Recipe..."
      [ -f "$1/Recipe" ] || die "Can't find $1/Recipe."
      source "$1/Recipe"
      if [ -f "$1/$recipesubdir/Recipe" ]
      then source "$1/$recipesubdir/Recipe"
      fi
      if [ "$is_meta" = "yes" ]
      then
         for pkgver in "${include[@]}"
         do
            ipkg="${pkgver%--*}"
            ver="${pkgver#*--}"
            fetch_included_recipes "$1" "$ipkg" "$ver"
         done
      else
         cd "$root/Files/Compile/Archives"
         if [ "$url" ]
         then
            file=`basename "$url"`
            [ ! -e "$file" ] && { $wget -c "$url" || die "Couldn't fetch $url" ;} || true
         fi
         if [ "${urls[*]}" ]
         then
            for url in "${urls[@]}"
            do
               file=`basename "$url"`
               [ ! -e "$file" ] && { $wget -c "$url" || die "Couldn't fetch $url" ;} || true
            done
         fi
      fi
   ) || die
}

source "$chrootcompileCompileConf"

fetch_archive_off_recipe "$1"

#############################################################################
# Setting LD_LIBRARY_PATH variable which will be used on chrooted operations
#############################################################################
export LD_LIBRARY_PATH=/System/Links/Libraries

function in_chroot() {
   $sudo chroot $root "$@"
}

[ "$verbose" ] && echo "ChrootCompile: Will run ldconfig..."
in_chroot ldconfig

if [ -e Directories.conf ]
then
   $sudo cp Directories.conf $root/$goboPrograms/Scripts/Settings/Scripts/Directories.conf
fi

if ! [ "$chrootcompileMode" = "gobo" ]
then
   ln -nfs $crossprefixdir/Programs $root/View
fi

#############################################################################
# Let the compilation begin!
#############################################################################

# Only local packages are used to fullfil dependencies
$sudo bash -c "echo 'defaultRepositories=( local_package )' > $root/$goboPrograms/Scripts/Settings/Scripts/FindPackage.conf"
$sudo bash -c "echo 'defaultLocalPackagesPaths=( /Depot/$getclean ; /Depot/LocalPackages )' >> $root/$goboPrograms/Scripts/Settings/Scripts/GetAvailable.conf"

function check_dependencies() {
   [ "$verbose" ] && echo "ChrootCompile: Checking dependencies..."
   
   in_chroot CheckDependencies --no-web --add-self=never --mode=missing "$name" "$version" recipe | while read depnam depver deptyp depurl
   do
      [ "$depnam" ] || continue
      case $deptyp in
      installed)
         : # ok, skip
         ;;
      local_package)
         in_chroot InstallPackage --no-web $depurl || die "Installation of dependency $depnam $depver failed ($depurl used)."
         ;;
      None)
         die "ChrootCompile: Unresolved dependency: $depnam $depver"
         ;;
      *)
         die "ChrootCompile: Dependency not available as a package: $depnam $depver ($deptype found)."
         ;;
      esac
   done
}

# disabled for now
# check_dependencies

echo "ChrootCompile: Will run Compile..."
export NO_UNIONFS=1
in_chroot Compile --batch --no-web --no-symlink --no-sign $crossopts $name $version || die "Compilation failed."

#############################################################################
#  After the compilation is done,
#  pack the program and copy the resulting package to './$putclean', the place
#  of pure packages
#############################################################################

# FIXME: Should be based on Directories.conf
if [ "$chrootcompileMode" = "gobo" ]
then
   package=`in_chroot CreatePackage --no-sign --no-verify $name $version`
   mkdir -p $scriptdir/$putclean
   cp $root/$name--$version* $scriptdir/$putclean
else
   fullroot=`readlink -f $root`
   cd $root/View
   mkdir -p $fullroot/../$putclean/
   readlink -f $fullroot/../$putclean/$name--$version--$arch.tar.bz2
   tar jcvpf $fullroot/../$putclean/$name--$version--$arch.tar.bz2 $name/$version
fi

# Remove the left over Area
cleanup
[ -d "$root" ] && rm -rf "$root"
