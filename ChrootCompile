#!/bin/sh 
#-e

#############################################################################
# Current requirements for this script:
# - './Recipes' directory containing all potentially required recipes
#   Not a requirement right now, but implies accessing the web if not present
#
# - './Bootstrap' directory which will contain unpacked packages installed
#   within $root. Those unpacked dirs are binded within $root (instead
#   of simply copied or unpacked) in order to reduce preparation time.
#   Not exactly a requirement right now, since it is created on demand, based
#   on packages from './LocalPackages'. Can be understood as a 'unpacked 
#   pakages cache'
#
# - './LocalPackages' directory containing binary packages available to 
#    prepare the Bootsrap and fulfill dependencies. It may be, for example,
#    a mirror of all official packaes available.
#
# Other directories:
# - './$getclean' directory where newly compiled packages are fetched.
# - './$putclean' directory where compiled packages are stored.
#   (These are usually the same (./Clean) but can be different for
#   debugging purposes.)
#
# - './Area' directory created at each run, which will contain a complete 
#    set of installed programs, required to compile something.
#
#############################################################################

function die() {
   echo "ChrootCompile: $*"
   exit 1
}

#############################################################################
# Parsing options. By now, only 'chrootcompileCompileConf'
#############################################################################
scriptdir=$(readlink -f $(dirname $0))
source $scriptdir/ChrootCompile.conf
if [ ! "$goboPrograms" ]
then export goboPrograms=/Programs
fi
sudo=sudo

#############################################################################
# '--repack' option: (to be used only on GoboLinux systems)
#############################################################################
if [ "$1" == "--repack" -o "$1" == "--just-repack" ]
then
   cd Bootstrap || exit 1
   for i in Compile Scripts
   do
      [ -d $i ] && rm -rf $i
      rm $i--*
      CreatePackage --no-verify --no-sign $i
   done
   cd -
   [ "$1" == "--just-repack" ] && exit 0
   shift
fi



#############################################################################
# Which packages are required to run Compile
#############################################################################
base_dependencies=(
   "Glibc"
    "Ncurses" # needed by Bash
    "Readline" # needed by Bash
    "GPM" # needed by Bash (FIXME)
    "Bison" # needed at the compilation of some programs (FIXME)
   "Bash"
    "CoreUtils" # needed by Scripts (cp...)
    "Sed" # needed by Scripts
     "PCRE" # needed by Grep
    "Grep" # needed by Scripts
    "Python" # needed by Scripts
#     "OpenSSL" # needed by Wget
#    "Wget" # needed by Compile
    "Gawk" # needed by Compile
    "FindUtils" # needed by Compile (find)
     "Bzip2" # needed by Atool
     "Gzip" # needed by Atool
     "Tar" # needed by Atool
     "Perl" # needed by Atool
    "Atool" # needed by Compile
     "ZLib" # needed by File
    "File" # needed by Scripts
    "MkTemp" # needed by Scripts
    "Mtail" # needed by Scripts
    "BinUtils" # needed by GCC (as)
    "Linux" # needed by GCC (include/linux)
#    "Linux-Libc-Headers" # instead of Linux
   "GCC"
    "Sudo" # needed by Scripts
    "Make" # needed by Compile
    "Patch" # needed by Compile
     "E2FSProgs" # needed by Util-Linux (libblkid.so)
    "Util-Linux" # needed by Compile (mount)
    "DiffUtils" # needed by Compile (diff)
   "Scripts"
   "Compile"
)

export LANG=C
export LC_ALL=C


if [ -d "$1" -o -f "$1/Recipe" ]
then
   recipedir="$1"
   name=$(basename $(dirname $recipedir))
   version=$(basename $recipedir)
else
   die "Expected recipe directory as a parameter (example: Recipes/Bash/3.0)"
fi


arch=`uname -m`

echo "ChrootCompile: Compiling $name $version..."

#############################################################################
# Preparing stub root directory
#############################################################################
root=Area-$name-$version
getclean=Clean
putclean=CleanPackages

echo "ChrootCompile: Preparing $root..."

#############################################################################
# Setting signal handlers (cleanup before exit if interrupted)
#############################################################################

function cleanup() {
   echo "ChrootCompile: Will unmount /dev..."
   $sudo umount $root/System/Kernel/Devices || true
   echo "ChrootCompile: Will unmount /proc..."
   $sudo umount $root/System/Kernel/Status || true
   echo "ChrootCompile: Will unmount Archives..."
   $sudo umount $root/Files/Compile/Archives || true
   mount | grep "$root" | awk '{ print $3 }' | while read mp
   do 
      echo "ChrootCompile: Will unmount $mp..."
      $sudo umount $mp
   done
}

trap cleanup TERM STOP HUP EXIT

cleanup

if [ -d "$root" ]
then
   date=`date +%Y%m%d-%H%M`
   echo "Backing up old $root to $root-old-$date."
   $sudo mv $root $root-old-$date
fi

mkdir -p $root
mkdir -p $root/System/Links/Executables
mkdir -p $root/System/Links/Environment
mkdir -p $root/System/Links/Libraries
mkdir -p $root/System/Links/Headers
mkdir -p $root/System/Links/Manuals
mkdir -p $root/System/Links/Shared
mkdir -p $root/System/Links/Tasks
mkdir -p $root/System/Settings
mkdir -p $root/System/Variable
mkdir -p $root/System/Variable/tmp
mkdir -p $root/System/Variable/log
mkdir -p $root/System/Kernel
mkdir -p $root/System/Kernel/Boot
mkdir -p $root/System/Kernel/Objects
mkdir -p $root/System/Kernel/Modules
mkdir -p $root/System/Kernel/Devices
mkdir -p $root/System/Kernel/Status
mkdir -p $root/Users
mkdir -p $root/Users/root
mkdir -p $root/Files
mkdir -p $root/Files/Compile
mkdir -p $root/Files/Compile/Archives
mkdir -p $root/Mount
mkdir -p $root/$goboPrograms
mkdir -p $root/usr

mkdir -p $root/Depot/LocalPackages
mkdir -p $root/Depot/$getclean


ln -nfs /System/Kernel/Objects $root/sys
ln -nfs /System/Kernel/Devices $root/dev
ln -nfs /System/Kernel/Status $root/proc
ln -nfs /System/Variable $root/var
ln -nfs /System/Variable/tmp $root/tmp
ln -nfs /System/Links/Libraries $root/lib
ln -nfs /System/Settings $root/etc
ln -nfs /System/Links/Executables $root/bin
ln -nfs /System/Links/Executables $root/sbin

ln -nfs . $root/usr/X11R6
ln -nfs . $root/usr/local
ln -nfs /System/Links/Executables $root/usr/bin
ln -nfs /System/Links/Headers $root/usr/include
ln -nfs /System/Links/Libraries $root/usr/lib
ln -nfs /System/Links/Manuals $root/usr/man
ln -nfs /System/Links/Executables $root/usr/sbin
ln -nfs /System/Links/Shared $root/usr/share

chmod 777 $root/System/Variable/tmp # Fibo also wants to write temp files

#############################################################################
# Copying recipes to root directory
#############################################################################
if [ -d Recipes ]
then
   cp -rL Recipes $root/Files/Compile
else
   echo "Warning, ./Recipes not found. Skipping copy of recipes inside $root"
fi


#############################################################################
# Getting packages for Bootstrap - Temporary only
#############################################################################
[ -d LocalPackages ] || mkdir LocalPackages
[ -d Bootstrap ] || mkdir Bootstrap
[ -d $getclean ] || mkdir $getclean
for dep in "${base_dependencies[@]}"
do
   if ! ls Bootstrap/$dep--* &> /dev/null && ! ls $getclean/$dep--* &> /dev/null && ! ls LocalPackages/$dep--* &> /dev/null \
   && ! [ -d Bootstrap/$dep -o -d $getclean/$dep -o -d LocalPackages/$dep ]
   then
#      if [ -e /System/Settings/gobo ]
#      then
#         echo "Warning: Could not find $dep in ./{LocalPackages,Bootstrap,$getclean}. Creating package based on host system"
#         cd Bootstrap; CreatePackage --no-verify --no-sign $dep; cd - &> /dev/null
#      else
         die "Package $dep, needed for bootstrap, was not found."
#      fi
   fi
done

#############################################################################
# Installing base packages inside root directory
#############################################################################
echo "ChrootCompile: Installing base packages inside $root..."

function filter_dir() {
   grep -v Settings | grep -v Variable | grep -v Current
}

function load_dependency() {
   local dep="$1"
   local pkg=
   for repo in $getclean Bootstrap
   do
      [ `ls $repo/$dep--* 2> /dev/null | wc -l` -gt 1 ] && {
         die "More than one entry for $dep in $repo/ directory."
      } || true
      [ `ls $repo/$dep 2> /dev/null | filter_dir | wc -l` -gt 1 ] && {
         die "More than one entry for $dep in $repo/ directory."
      } || true
      pkg=`ls -d $repo/$dep/* 2> /dev/null | filter_dir || true`
      [ ! "$pkg" ] && pkg=`ls $repo/$dep--* 2> /dev/null || true`
      [ "$pkg" ] && break
   done
   [ ! "$pkg" ] && {
      die "Base dependency $dep could not be found."
   }
   if [ $dep = $name ]
   then realcopy="--real-copy"
   else realcopy=""
   fi
   $sudo $scriptdir/MiniInstallPackage $realcopy "$pkg" "$root"
}

# unused for now
function guess_and_load_dependency() {
   echo "=> GuessLatest enabled"
   for dep in "${base_dependencies[@]}"
   do
      packed_places="$getclean Bootstrap"
      unpacked_place=BootStrap
      #packages=`ls -d Bootstrap/$dep/* | filter_dir`
      packages=`ls -d -U Bootstrap/$dep/* {$getclean,Bootstrap,LocalPackages}/$dep--* 2> /dev/null | filter_dir` 
      if [ ! "$packages" ]
      then
         die "Base dependency $dep could not be found."
      fi
      latest=`GuessLatest $packages`
      echo "ChrootCompile: Using $latest"

      if ! echo "$latest" | grep "^Bootstrap/" &> /dev/null
      then
         cp "$latest" Bootstrap/ # only 'packed' packages
         pkg=Bootstrap/`basename "$latest"`
      else
         pkg="$latest"
      fi
      if [ $dep = $name ]
      then realcopy="--realcopy"
      else realcopy=""
      fi
      $sudo $scriptdir/MiniInstallPackage "$pkg" "$root"
   done
}

for dep in `{
   echo "${base_dependencies[*]} " | tr " " "\n" 
   [ -e "$1/Resources/Dependencies" ] && cut -d" " -f1 "$1/Resources/Dependencies"
} | sort -u`
do
   load_dependency "$dep"
done

#############################################################################
# Creating files at $root/System/Settings/ 
# => passwd, group, sudoers, resolv.conf, hosts, fstab
#############################################################################
echo "ChrootCompile: Creating files at /System/Settings..."

function sudo_rm_if_e() {
   if [ -e "$1" ]
   then
      echo "ChrootCompile: removing $1..."
      $sudo rm -f "$1"
   else
      return 0
   fi
}

sudo_rm_if_e $root/System/Settings/passwd
cat <<EOF > $root/System/Settings/passwd
root:x:0:0:Gobo:/Users/root:/bin/bash
fibo:x:21:21:Fibo:/tmp:/bin/bash
EOF

sudo_rm_if_e $root/System/Settings/group
cat <<EOF > $root/System/Settings/group
root:x:0:root
fibo:x:21:fibo
EOF

sudo_rm_if_e $root/$goboPrograms/Sudo/Settings/sudoers
sudo chmod 777 $root/$goboPrograms/Sudo/Settings
cat <<EOF > $root/$goboPrograms/Sudo/Settings/sudoers
root ALL=(ALL) NOPASSWD: ALL
EOF
sudo chmod 755 $root/$goboPrograms/Sudo/Settings

$sudo chmod 440 $root/$goboPrograms/Sudo/Settings/sudoers
$sudo chown 0:0 $root/$goboPrograms/Sudo/Settings/sudoers
sudo_rm_if_e $root/System/Settings/sudoers
ln -nfs /$goboPrograms/Sudo/Settings/sudoers $root/System/Settings/sudoers
touch $root/System/Settings/fstab

# This should limit network access inside the chroot
#cp /etc/resolv.conf $root/System/Settings/resolv.conf
#cp /etc/hosts $root/System/Settings/hosts

#############################################################################
# Binding /dev, /proc and ./Archives inside root directory
#############################################################################
$sudo mount --bind /dev $root/System/Kernel/Devices
$sudo mount --bind /proc $root/System/Kernel/Status

[ -d ./Archives ] || mkdir ./Archives
$sudo mount --bind Archives $root/Files/Compile/Archives

$sudo mount --bind LocalPackages $root/Depot/LocalPackages
$sudo mount --bind $getclean $root/Depot/$getclean

#############################################################################
# Download required archives to ./Archives
#############################################################################
(
   source "$chrootcompileCompileConf"
   source "$1/Recipe"
   cd "$root/Files/Compile/Archives"
   if [ "$url" ]
   then
      file=`basename "$url"`
      [ ! -e "$file" ] && wget -c "$url"
   fi
   if [ "${urls[*]}" ]
   then
      for url in "${urls[@]}"
      do
         file=`basename "$url"`
         [ ! -e "$file" ] && wget -c "$url"
      done
   fi
)

#############################################################################
# Setting LD_LIBRARY_PATH variable which will be used on chrooted operations
#############################################################################
export LD_LIBRARY_PATH=/System/Links/Libraries

function in_chroot() {
   $sudo chroot $root "$@"
}

echo "ChrootCompile: Will run ldconfig..."
in_chroot ldconfig

if [ -e Directories.conf ]
then
   $sudo cp Directories.conf $root/$goboPrograms/Scripts/Settings/Scripts/Directories.conf
fi

if ! [ "$chrootcompileMode" = "gobo" ]
then
   ln -nfs Programs $root/View
fi

#############################################################################
# Let the compilation begin!
#############################################################################

# Only local packages are used to fullfil dependencies
$sudo bash -c "echo 'defaultRepositories=( local_package )' > $root/$goboPrograms/Scripts/Settings/Scripts/FindPackage.conf"
$sudo bash -c "echo 'defaultLocalPackagesPaths=( /Depot/$getclean ; /Depot/LocalPackages )' >> $root/$goboPrograms/Scripts/Settings/Scripts/GetAvailable.conf"

function check_dependencies() {
   echo "ChrootCompile: Checking dependencies..."
   
   in_chroot CheckDependencies --no-web --add-self=never --mode=missing "$name" "$version" recipe | while read depnam depver deptyp depurl
   do
      [ "$depnam" ] || continue
      case $deptyp in
      installed)
         : # ok, skip
         ;;
      local_package)
         in_chroot InstallPackage --no-web $depurl || die "Installation of dependency $depnam $depver failed ($depurl used)."
         ;;
      None)
         die "ChrootCompile: Unresolved dependency: $depnam $depver"
         ;;
      *)
         die "ChrootCompile: Dependency not available as a package: $depnam $depver ($deptype found)."
         ;;
      esac
   done
}

# disabled for now
# check_dependencies

echo "ChrootCompile: Will run Compile..."
in_chroot Compile --batch --no-web --no-symlink --no-sign $name $version || die "Compilation failed."

#############################################################################
#  After the compilation is done,
#  pack the program and copy the resulting package to './$putclean', the place
#  of pure packages
#############################################################################

# FIXME: Should be based on Directories.conf
if [ "$chrootcompileMode" = "gobo" ]
then
   package=`in_chroot CreatePackage --no-sign --no-verify $name $version`
   mkdir -p $scriptdir/$putclean
   cp $root/$name--$version* $scriptdir/$putclean
else
   fullroot=`readlink -f $root`
   cd $root/View
   mkdir -p $fullroot/../$putclean/
   readlink -f $fullroot/../$putclean/$name--$version--i686.tar.bz2
   tar jcvpf $fullroot/../$putclean/$name--$version--i686.tar.bz2 $name/$version
fi
