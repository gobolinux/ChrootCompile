#!/bin/bash

#############################################################################
# Imports
#############################################################################
source ScriptFunctions
Import GoboLinux
Import OptionParser
Import Bootstrap
Import Archive

#############################################################################
# Setting options
#############################################################################
scriptCredits="Copyright (C) 2005-2006 Hisham H. Muhammad. Released under the GNU GPL."
scriptUsage="[options] { <recipe> [<version>] | <path_to_recipe> }"
Add_Option_Boolean "l" "local-repository" "Look at the local repository for recipes." ""
Add_Option_Boolean "r" "revisions-tree" "Look at the local revisions tree for recipes (implies --local-repository)." ""
Add_Option_Boolean "n" "new-names" "Compile using new names from /System/Index hierarchy." ""
Add_Option_Boolean "p" "local-programs" "Take entries from /Programs (use with care)." ""
Add_Option_Boolean "s" "setup-environment" "Creates the chroot environment by calling SetupChrootEnv" ""
Add_Option_Boolean "t" "use-tmpfs" "Uncompress and build sources on tmpfs. Contents will be discarded after compilation finishes." ""
Add_Option_Entry "X" "cross-compile" "Use a cross-compiler according to the configuration in Cross-<parameter>.conf." ""
Add_Option_Entry "d" "use-directory" "Use specified directory as root for ChrootCompile." ""
Add_Option_Boolean "S" "no-sign" "Do not try to sign the resulting package."
Add_Option_Boolean "D" "no-debug" "Do not invoke bash if compilation fails."
Add_Option_Boolean "W" "no-web" "Do not download precompiled packages from the web when Dependencies are not found." ""
Add_Option_Boolean "R" "no-recursive" "Do not recursively ChrootCompile dependencies that doesn't have a package." ""
scriptExample="--local-repository /Files/Compile/LocalRecipes/Foo/1.0"
helpOnNoArguments=yes
Parse_Options "$@"


#############################################################################
# Default options
#############################################################################
chrootcompileMode=gobo


#############################################################################
# Operation
#############################################################################
Parse_Conf Compile/Compile.conf
Parse_Conf ChrootCompile.conf

if Is_Entry "use-directory"
then chrootCompileDir="$(Entry 'use-directory')"
elif [ -z "$chrootCompileDir" ]
then Die "Please specify the chrootCompileDir in $goboSettings/ChrootCompile/ChrootCompile.conf"
fi

if [ "$UID" -eq 0 ]
then sudo_exec=
fi

unset localrepository
Boolean "local-repository" && localrepository=yes

unset userevisionstree
if Boolean "revisions-tree"
then
    Parse_Conf --mandatory "DevelScripts/CompileSubversion.conf"
    userevisionstree=yes
    localrepository=yes
fi

unset nodebug
Boolean "no-debug" && nodebug=yes

unset noweb
Boolean "no-web" && noweb=yes

unset usetmpfs
Boolean "use-tmpfs" && usetmpfs=yes

unset norecursive
Boolean "no-recursive" && norecursive=yes

unset localprograms
Boolean "local-programs" && localprograms=yes

unset verbose
Boolean "verbose" && verbose="--verbose"

unset usesystemindex
if Boolean "new-names" 
then
   usesystemindex=yes
   filesdir=Data
   depotdir=Data
else
   filesdir=Files
   depotdir=Depot
fi

hostarch=`uname -m`
case "$hostarch" in
   i686|i585|i486|i386) hostarch=i686 ;;
esac

unset crossopts
unset crossrepodir
unset crossprefixdir
unset crosskerneldir
unset crosstoolchaindir
if Is_Entry "cross-compile"
then
    arch_conf=`Entry "cross-compile"`
    crossopts="--cross-compile $arch_conf"
    crossconf="$goboSettings/Compile/Cross/Cross-$arch_conf.conf"
    [ ! -f $crossconf ] && Die "$crossconf: file not found."
    compileSourcesDir="$compileDir/Sources-$arch_conf"

    eval $(grep "cross_prefix_dir="    $crossconf)
    eval $(grep "cross_kernel_dir="    $crossconf)
    eval $(grep "cross_toolchain_dir=" $crossconf)
    eval $(grep "cross_uname_m="       $crossconf)
    crossprefixdir=$cross_prefix_dir
    crosskerneldir=$cross_kernel_dir
    crosstoolchaindir=$cross_toolchain_dir
    crossrepodir="$crossprefixdir/$goboPrograms"

    case "$cross_uname_m" in
       arm*) recipesubdir=arm ;;
       *)    recipesubdir="$cross_uname_m"
    esac

    for c in ${cross_blacklist[@]}
    do
        [ -n "${c}" ] && blacklist="${blacklist:+${blacklist},}${c}"
    done
else
    case "$hostarch" in
       i686|i585|i486|i386) recipesubdir=i686 ;;
       *)                   recipesubdir="$hostarch"
    esac
    
    for h in ${host_blacklist[@]}
    do
        [ -n "${h}" ] && blacklist="${blacklist:+${blacklist},}${h}"
    done
fi

if [ "$goboPrefix" ]
then programs=`echo $goboPrograms | sed "s,^$goboPrefix,,g"`
else programs=$goboPrograms
fi

targetarch=$recipesubdir

#############################################################################
# Verify our whereabouts
#############################################################################
[ "$chrootCompileDir" ] && cd "$chrootCompileDir"

if Boolean "setup-environment" || [ ! -d BaseDependencies -a ! "$localprograms" ]
then
    if [ ! -z "`ls`" ]
    then Die "You need to create a directory in which you should run ChrootCompile, where it will store its data files and create its chroot jails. Create an empty dir and run ChrootCompile from there."
    fi
    Log_Normal "No ChrootCompile environment found in $PWD. Setting things up..."
    SetupChrootEnv
    [ -z "$(Arg 1)" ] && exit 0
fi

if [ -z "$(Arg 1)" ]
then Die "You must specify a program to compile. Use '--help' for help."
fi

#############################################################################
# Which packages are required to run Compile
#############################################################################
base_dependencies=(
    "Linux-Headers"
    "Compile"
)

export LANG=C
export LC_ALL=C

if [ "$(Arg 2)" ]
then
   name="$(Arg 1)"
   version="$(Arg 2)"
   parsedoptions=$(echo $(Get_Parsed_Options) | awk {' $(NF-1)=""; $NF=""; print '})
else
   if [ -d "$(Arg 1)" ]
   then
      name=$(basename $(dirname $(Arg 1)))
      version=$(basename $(Arg 1))
   else
      name="$(Arg 1)"
      version=""
   fi
   numargs=$(( ${#userargs[@]} - 1 ))
   parsedoptions=$(echo $(Get_Parsed_Options) | awk {' $NF=""; print '})
fi

function locate_recipe() {
   for trydir in "${trydirs[@]}"
   do
      recipedir="`GuessLatest $trydir/$name/$version*`"
      if [ -e "$recipedir/Recipe" ]
      then
         setversion=$(basename "$recipedir")
         if ! [ "$version" ]
         then
            # If it made a decision, check if it picked the right recipe
            if ! Boolean "batch" && [ `ls $trydir/$name/$version* | wc -l` -gt 1 ]
            then Ask_Continue "Will compile $name $setversion from $trydir..."
            fi
         fi
         version="$setversion"
         break
      else
         recipedir=""
      fi
   done
}

function get_recipe_by_name() {
    locate_recipe
    if [ ! "$noweb" -a ! "$recipedir" -a "$localrepository" ]
    then
       GetRecipe $name $version && locate_recipe
    fi
}

if [ "$localrepository" ]
then trydirs=("${compileRecipeDirs[@]}" ${compileGetRecipeDir})
else trydirs=(Recipes)
fi
if [ "$userevisionstree" ]
then trydirs=(${compileSubversionLocalRevisions} "${trydirs[@]}")
fi

get_recipe_by_name
if [ ! "$recipedir" ]
then
   name=$(GuessProgramCase ${name})
   get_recipe_by_name
   [ ! "$recipedir" ] && Die "Could not find recipe for $name $version"
fi

Log_Normal "ChrootCompile: Compiling $name $version..."

#############################################################################
# Preparing stub root directory
#############################################################################
root=${PWD}/Area-$name-$version
hostgetclean=${PWD}/Clean/$hostarch
targetgetclean=${PWD}/Clean/$targetarch
putclean=${PWD}/Clean/$targetarch
hostdepsdownload=${PWD}/Downloaded/$hostarch
targetdepsdownload=${PWD}/Downloaded/$targetarch
targetunpacked=${PWD}/Unpacked/$targetarch

mkdir -p $hostgetclean
mkdir -p $targetgetclean
mkdir -p $hostdepsdownload
mkdir -p $targetdepsdownload

Log_Normal "ChrootCompile: Preparing $root..."

#############################################################################
# Setting signal handlers (cleanup before exit if interrupted)
#############################################################################

function cleanup() {
   local ret=0
   local quiet="$1"
   unset LANG LC_ALL

   function unmount_dir() {
      local mp=$(echo "$1" | sed 's,/\+,/,g')
      Log_Verbose "Unmounting $mp..."
      if [ "$mp" ] && grep -q "$mp" /proc/mounts
      then $sudo_exec umount "$mp"
      else true
      fi
      ret=$?
   }

   if [ "$quiet" ]
   then unmount="Quiet unmount_dir"
   else unmount="unmount_dir"
   fi

   # umount batch
   while read from mountpoint type options
   do
      $unmount ${mountpoint}
   done < <(cat /proc/mounts | grep -- "${root}")
   if [ "$crossopts" ]
   then
      [ -d "$cross_prefix_dir/$goboModules" ] && $unmount "${root}$cross_prefix_dir/$goboModules"
      $unmount ${root}$crosstoolchaindir
   fi
   $unmount ${root}$depotdir/$targetgetclean
   $unmount ${root}$depotdir/$hostgetclean
   $unmount ${root}System/Kernel/Status
   $unmount ${root}System/Kernel/Devices
   [ "$userevisionstree" ] && $unmount "${root}$compileSubversionLocalRevisions"
   [ "$usetmpfs" ] && $unmount $(readlink -f ${root}$compileSourcesDir)
   if [ ! "$localrepository" ]
   then
      $unmount "$root/$filesdir/Compile/Archives"
   else
      [ -d "$crosskerneldir" ] && $unmount "${root}$crosskerneldir"
	  $unmount "${root}/$filesdir/Compile"
   fi
   rmdir Archives 2> /dev/null
   return $ret
}

trap cleanup TERM STOP HUP EXIT

cleanup "quiet" || Log_Terse "At least one mountpoint was not cleanly unmounted."

if [ -d "$root" ]
then
   date=`date +%Y%m%d-%H%M`
   Log_Normal "Backing up old $root to $root-old-$date."
   $sudo_exec mv $root $root-old-$date
fi

function create_root() {
   local chrootdir="$1"
   local prefix="$2"
   local rootdir="$chrootdir/$prefix"

   if [ "$usesystemindex" ]
   then Create_Filesystem_Tree "$rootdir" "gobo" "true"
   else Create_Filesystem_Tree "$rootdir" "gobo"
   fi

   Create_Device_Nodes "$rootdir"

   mkdir -p $rootdir/$depotdir/$hostgetclean
   mkdir -p $rootdir/$depotdir/$targetgetclean
   mkdir -p $rootdir/Files/Compile/{Archives,Sources,Recipes,LocalRecipes}
   [ "$usesystemindex" ] && ln -s /Files/Compile $rootdir/Data/Compile

   if [ ! -z "$prefix" ]
   then
       # this should point to the temporary environment set by chrootcompile
       mkdir -p ${rootdir}/${prefix%/*}
       ln -nfs .. $rootdir/$prefix

       # these are needed by Compile and need to point to chrootcompile's rootfs;
       # note that at run time /System/Settings represents chrootcompile's Scripts
       # version and not the one from the host
       ln -s /System/Settings/Compile $rootdir/System/Settings/
       ln -s /System/Settings/Scripts $rootdir/System/Settings/
   fi
}

create_root $root
[ "$hostarch" != "$targetarch" ] && create_root $root $crossprefixdir

#############################################################################
# Copying recipes to root directory
#############################################################################

if ! Boolean "local-repository" && [ -d Recipes ]
then
   cp -rL Recipes $root/$filesdir/Compile
elif ! Boolean "local-repository"
then
   Log_Terse "Warning, ./Recipes not found. Skipping copy of recipes inside $root"
   Log_Terse "Assuming use of local repository from host's ${compileDir}."
   localrepository=yes
fi

if [ "$localrepository" ]
then
    Log_Normal "ChrootCompile: bind-mounting ${compileDir} inside $root"
    $sudo_exec mount --bind ${compileDir} $root/$filesdir/Compile

    if [ -d "$crosskerneldir" ]
    then
        Log_Verbose "ChrootCompile: bind-mounting $crosskerneldir inside $root"
        mkdir -p $root/$crosskerneldir
        $sudo_exec mount --bind $crosskerneldir $root/$crosskerneldir
    fi
fi

if [ "$userevisionstree" ]
then
    Log_Verbose "ChrootCompile: bind-mounting ${compileSubversionLocalRevisions} inside $root"
    $sudo_exec mkdir -p $root/$compileSubversionLocalRevisions
    $sudo_exec mount --bind ${compileSubversionLocalRevisions} $root/$compileSubversionLocalRevisions
fi

[ "$usetmpfs" ] && mount -t tmpfs none ${root}/$compileSourcesDir

#############################################################################
# Getting packages for BaseDependencies - Temporary only
#############################################################################
if [ ! "$localprograms" ]
then
   for arch in $hostarch $targetarch
   do
      [ -d Unpacked/$arch ] || mkdir -p Unpacked/$arch
      [ -d Unpacked/$arch/_Checksums ] || mkdir -p Unpacked/$arch/_Checksums
   done
   [ -d BaseDependencies ] || mkdir BaseDependencies

fi

[ -d $hostgetclean ] || mkdir -p $hostgetclean
for dep in "${base_dependencies[@]}"
do
   if ! ls BaseDependencies/$dep--* &> /dev/null && ! ls $hostgetclean/$dep--* &> /dev/null \
   && ! [ -d BaseDependencies/$dep -o -d $hostgetclean/$dep ] \
   && [ "$local_packages" -a ! -d "/Programs/$dep/Current/" ]
   then
      Die "Package $dep, needed for bootstrap, was not found."
   fi
done

#############################################################################
# Installing base packages inside root directory
#############################################################################
Log_Normal "Installing base packages inside $root..."

function filter_dir() {
   grep -v \/Settings\/ | grep -v \/Variable\/ | grep -v \/Current\/
}

function extract_version() {
   echo "$1" | sed -e 's,\(.*\)--\(.*\)--\(.*\),\2,g' -e 's,\(.*\)-r\(.*\),\1,g'
}

function extract_revision() {
   echo "$1" | sed -e 's,\(.*\)--\(.*\)--\(.*\),\2,g' -e 's,\(.*\)-r\(.*\),r\2,g'
}

fetch_dependency() {
   local targetdir="${1}"
   local application="${2}"
   local version="${3}"
   local type="${4}"
   local uri="${5}"
   if [ "${type}" = "recipe" -o "${type}" = "local_recipe" ]
   then
      Log_Normal "Will ChrootCompile ${application} ${version}"
      ChrootCompile ${parsedoptions} "${application}" "${version}" || Die "Failed building dependency ${application} ${version}"
      pkg="$(ls --quoting-style=escape "$hostgetclean/${application}--${version}"*)"
   elif [ "${type}" = "local_package" ]
   then
      Log_Normal "Using local package ${uri}"
      pkg="${uri}"
   elif [ "${type}" = "official_package" ]
   then
      Log_Normal "Fetching ${uri} to ${hostdepsdownload}"
      pushd "${hostdepsdownload}"
      wget "${uri}" || Die "Failed fetching ${uri}"
      Quiet popd
      pkg="${hostdepsdownload}/$(basename "${uri}")"
   elif [ "$uri" = "NO_PROGRAM" ]
   then
      [ "${version}" == "None" ] && version=""
      pkg="$(ls --quoting-style=escape {$hostgetclean,${chrootCompileDir}/BaseDependencies,$hostdepsdownload}/${application}--${version}* 2> /dev/null)"
   fi
   if [ -z "${pkg}" ]
   then
      Log_Terse "No package found for ${application}"
      return 1
   else
      pkg="$(GuessLatest $pkg)"
      Log_Normal "Unpacking ${pkg} in ${targetdir}"
      Quiet Unpack_Archive "${pkg}" "${targetdir}"
   fi
   return 0
}

install_dependency() {
   local targetdir="${1}"
   local application="${2}"
   local version="${3}"
   local type="${4}"
   local package="${5}"
   local res=0
   
   if [ "$type" = "None" ]
   then 
      fetch_dependency ${chrootCompileDir}/Unpacked/$arch $application $version $type NO_PROGRAM
      [ "${version}" == "None" ] && version=""
      pkg="$(ls --quoting-style=escape {$hostgetclean,${chrootCompileDir}/BaseDependencies,$hostdepsdownload}/${application}--${version}* 2> /dev/null)"
      if [ "$pkg" ]
      then
         type="local_package"
         package="$(GuessLatest $(readlink -f ${chrootCompileDir}/Unpacked/$arch/$application/${version}*))"
      fi
   fi

   if [ "${type}" = "local_package" ]
   then
      Log_Normal "Installing $application $version in $targetdir"
      unset usenewnames
      [ "$usesystemindex" ] && usenewnames="--new-names"
      $sudo_exec MiniInstallPackage $verbose $usenewnames "${package}" "${chrootCompileDir}/Unpacked/$arch" "$root" $params
      res=$?
   else
      Log_Normal "$application wasn't found in $package"
      res=1
   fi
   return $res
}

dependencytypes="local_package$([ -z "${norecursive}" ] && echo ",recipe"),oficial_package"

Log_Normal "Fetching base dependencies for ChrootCompile"
while read depname depversion type uri
do
   fetch_dependency "${chrootCompileDir}/Unpacked/$arch" "${depname}" "${depversion}" "${type}" "${uri}" || Die "Unable to fetch ${depname} ${depversion}"
done < <(CheckDependencies --types=${dependencytypes} \
                  --local-dirs="$hostgetclean,${chrootCompileDir}/BaseDependencies,$hostdepsdownload" \
                  --file="${goboPrograms}/ChrootCompile/Current/Resources/Dependencies" \
                  --no-prompt \
                  ${noweb:+--no-web} \
                  --gobo-programs="${chrootCompileDir}/Unpacked/$arch" \
                  ${blacklist:+--blacklist="${blacklist}"} \
                  --mode=missing)

[ -e "${recipedir}/Resources/BuildDependencies" ] && {
   Log_Normal "Fetching build dependencies for $name $version"
   while read depname depversion type uri
   do
      fetch_dependency "${chrootCompileDir}/Unpacked/$arch" "${depname}" "${depversion}" "${type}" "${uri}" || Die "Unable to fetch ${depname} ${depversion}"
   done < <(CheckDependencies --types=${dependencytypes} \
                  --local-dirs="$hostgetclean,${chrootCompileDir}/BaseDependencies,$hostdepsdownload" \
                  --file="${recipedir}/Resources/BuildDependencies" \
                  --no-prompt \
                  ${noweb:+--no-web} \
                  --gobo-programs="${chrootCompileDir}/Unpacked/$arch" \
                  ${blacklist:+--blacklist="${blacklist}"} \
                  --mode=missing)
}

Log_Normal "Fetching dependencies for $name $version"
while read depname depversion type uri
do
   fetch_dependency "${chrootCompileDir}/Unpacked/$arch" "${depname}" "${depversion}" "${type}" "${uri}" || Die "Unable to fetch ${depname} ${depversion}"
done < <(CheckDependencies --types=${dependencytypes} \
                  --local-dirs="$hostgetclean,${chrootCompileDir}/BaseDependencies,$hostdepsdownload" \
                  --file="${recipedir}/Resources/Dependencies" \
                  --no-prompt \
                  ${noweb:+--no-web} \
                  --gobo-programs="${chrootCompileDir}/Unpacked/$arch" \
                  ${blacklist:+--blacklist="${blacklist}"} \
                  --mode=missing)

Log_Normal "Installing dependencies for ChrootCompile"
while read depname depversion type uri
do
   [ "${uri}" = "NO_PROGRAM" ] && uri="${chrootCompileDir}/Unpacked/$arch"
   install_dependency "${root}" "${depname}" "${depversion}" "${type}" "${uri}" || Die "Unable to install ${depname} ${depversion} into ${root}"
done < <(CheckDependencies --types=local_package \
                  --local-dirs="${chrootCompileDir}/Unpacked/$arch,${chrootCompileDir}/BaseDependencies" \
                  --file="${goboPrograms}/ChrootCompile/Current/Resources/Dependencies" \
                  --no-prompt \
                  ${noweb:+--no-web} \
                  --gobo-programs="${root}/Programs" \
                  ${blacklist:+--blacklist="${blacklist}"} \
                  --mode=missing)

[ -e "${recipedir}/Resources/BuildDependencies" ] && {
   Log_Normal "Installing build dependencies for $name $version"
   while read depname depversion type uri
   do
      [ "${uri}" = "NO_PROGRAM" ] && uri="${chrootCompileDir}/Unpacked/$arch"
      install_dependency "${root}" "${depname}" "${depversion}" "${type}" "${uri}" || Die "Unable to install ${depname} ${depversion} into ${root}"
   done < <(CheckDependencies --types=local_package \
                  --local-dirs="${chrootCompileDir}/Unpacked/$arch" \
                  --file="${recipedir}/Resources/BuildDependencies" \
                  --no-prompt \
                  ${noweb:+--no-web} \
                  --gobo-programs="${root}/Programs" \
                  ${blacklist:+--blacklist="${blacklist}"} \
                  --mode=missing)
}

Log_Normal "Installing dependencies for $name $version"
while read depname depversion type uri
do
   [ "${uri}" = "NO_PROGRAM" ] && uri="${chrootCompileDir}/Unpacked/$arch"
   install_dependency "${root}" "${depname}" "${depversion}" "${type}" "${uri}" || Die "Unable to install ${depname} ${depversion} into ${root}"
done < <(CheckDependencies --types=local_package \
                  --local-dirs="${chrootCompileDir}/Unpacked/$arch" \
                  --file="${recipedir}/Resources/Dependencies" \
                  --no-prompt \
                  ${noweb:+--no-web} \
                  --gobo-programs="${root}/Programs" \
                  ${blacklist:+--blacklist="${blacklist}"} \
                  --mode=missing)

targetroot=$root/$crossprefixdir
if [ "$crossopts" ]
then targetrepository="$targetgetclean"
else targetrepository="$targetgetclean BaseDependencies"
fi

#############################################################################
# Creating files at $root/System/Settings/ 
# => passwd, group, sudoers, resolv.conf, hosts, fstab
#############################################################################
Log_Verbose "ChrootCompile: Creating files at /System/Settings..."

function sudo_rm_if_e() {
   if [ -e "$1" ]
   then
      Log_Verbose "ChrootCompile: removing $1..."
      $sudo_exec rm -f "$1"
   else
      return 0
   fi
}

settingsdir=/System/Settings

sudo_rm_if_e $root/$settingsdir/passwd
cat <<EOF > $root/$settingsdir/passwd
gobo:x:0:0:Gobo:/Users/gobo:/bin/bash
fibo:x:21:21:Fibo:/tmp:/bin/bash
EOF

sudo_rm_if_e $root/$settingsdir/group
cat <<EOF > $root/$settingsdir/group
gobo:x:0:gobo
bin:x:1:
sys:x:2:gobo
tty:x:4:
fibo:x:21:fibo
EOF

hostname=`hostname`
sudo_rm_if_e $root/$settingsdir/hosts
cat <<EOF > $root/$settingsdir/hosts
127.0.0.1 localhost $hostname
EOF

sudo_rm_if_e $root/$programs/Sudo/Settings/sudoers
$sudo_exec chmod 777 $root/$programs/Sudo/Settings
cat <<EOF > $root/$programs/Sudo/Settings/sudoers
Defaults !env_reset, setenv
gobo ALL=(ALL) NOPASSWD: ALL
EOF
$sudo_exec chmod 755 $root/$programs/Sudo/Settings

$sudo_exec chmod 440 $root/$programs/Sudo/Settings/sudoers
$sudo_exec chown 0:0 $root/$programs/Sudo/Settings/sudoers
sudo_rm_if_e $root/System/Settings/sudoers
ln -nfs /$programs/Sudo/Settings/sudoers $root/$settingsdir/sudoers
touch $root/$settingsdir/fstab

# This should limit network access inside the chroot
#cp /etc/resolv.conf $root/$settingsdir/resolv.conf
#cp /etc/hosts $root/$settingsdir/hosts

#############################################################################
# Binding /dev, /proc and ./Archives inside root directory
#############################################################################
$sudo_exec mount --bind /dev $root/System/Kernel/Devices
$sudo_exec mount --bind /proc $root/System/Kernel/Status

[ -d ./Archives ] || mkdir ./Archives
[ ! "$localrepository" ] && $sudo_exec mount --bind Archives $root/$filesdir/Compile/Archives

$sudo_exec mount --bind $hostgetclean $root/$depotdir/$hostgetclean
$sudo_exec mount --bind $targetgetclean $root/$depotdir/$targetgetclean

if [ "$crossopts" ]
then
    goboModules="/System/Kernel/Modules"
    mkdir -p $root/$crosstoolchaindir
    $sudo_exec mount --bind $crosstoolchaindir $root/$crosstoolchaindir
    if [ -d "$cross_prefix_dir/$goboModules" ]
    then $sudo_exec mount --bind $cross_prefix_dir/$goboModules $root/$cross_prefix_dir/$goboModules
    fi
fi

#############################################################################
# Download required archives to ./Archives
#############################################################################

Compile --batch --no-build ${crossopts} ${name} ${version} ${noweb:+--no-web} || Die "Fetching recipe(s) for ${name} ${version} failed"

#############################################################################
# Setting LD_LIBRARY_PATH variable which will be used on chrooted operations
#############################################################################
if [ "$usesystemindex" ]
then
   export LD_LIBRARY_PATH=/System/Index/lib
   export PATH=${PATH:+${PATH}:}/System/Index/bin:/System/Index/sbin
else
   export LD_LIBRARY_PATH=/System/Links/Libraries
fi

function in_chroot() {
   $sudo_exec env SUDO_OK=1 chroot $root "$@"
}

Log_Verbose "ChrootCompile: Will run ldconfig..."
in_chroot ldconfig

if [ -e Directories.conf ]
then
   $sudo_exec cp Directories.conf $root/$programs/Scripts/Settings/Scripts/Directories.conf
fi

if ! [ "$chrootcompileMode" = "gobo" ]
then
   ln -nfs $crossprefixdir/Programs $root/View
fi

#############################################################################
# Let the compilation begin!
#############################################################################

# Only local packages are used to fullfil dependencies
$sudo_exec bash -c "echo 'defaultRepositories=( local_package )' > $root/$programs/Scripts/Settings/Scripts/FindPackage.conf"
$sudo_exec bash -c "echo 'defaultLocalPackagesPaths=( /$depotdir/$targetgetclean ; )' >> $root/$programs/Scripts/Settings/Scripts/GetAvailable.conf"

function check_dependencies() {
   Log_Verbose "ChrootCompile: Checking dependencies..."
   
   in_chroot CheckDependencies --no-web --add-self=never --mode=missing "$name" "$version" recipe | while read depnam depver deptyp depurl
   do
      [ "$depnam" ] || continue
      case $deptyp in
      installed)
         : # ok, skip
         ;;
      local_package)
         in_chroot InstallPackage --no-web $depurl || Die "Installation of dependency $depnam $depver failed ($depurl used)."
         ;;
      None)
         Die "ChrootCompile: Unresolved dependency: $depnam $depver"
         ;;
      *)
         Die "ChrootCompile: Dependency not available as a package: $depnam $depver ($deptype found)."
         ;;
      esac
   done
}

# disabled for now
# check_dependencies
for i in "$root/$goboLinks"/Environment/*
do
   envfile="$root/`readlink $i`"
   while read line
   do
       eval "${line}"
   done < <(cat "$envfile")
done

if [ -e "$root/$goboExecutables/gdk-pixbuf-query-loaders" ]
then
   loadersfile="${root}/${goboSettings}/gtk-2.0/gdk-pixbuf.loaders"
   in_chroot gdk-pixbuf-query-loaders | $sudo_exec dd of=${loadersfile} 2> /dev/null
fi

Log_Normal "ChrootCompile: Will run Compile..."
unset failed

unset goboPrefix
unset TMPDIR
source GoboPath

in_chroot Compile --batch --no-web --no-sign --no-postinstall $verbose $crossopts $name $version || failed=yes
if [ "$failed" ]
then
   if [ ! "$nodebug" ]
   then
      echo -en "\007"    
      Log_Terse "Compilation failed, invoking bash for debugging purposes."
      in_chroot /bin/bash
   fi
   Die "Finished with errors."
fi

#############################################################################
#  After the compilation is done,
#  pack the program and copy the resulting package to './$putclean', the place
#  of pure packages
#############################################################################

function in_target() {
   [ "$crossopts" ] && export goboCrossCompiling=yes
   $@
   ret=$?
   [ "$crossopts" ] && unset goboCrossCompiling
   return $ret
}

# FIXME: Should be based on Directories.conf
date=`date +%Y%m%d`
finalversion=$(echo $version | sed -e "s,^cvs.*,$date-CVS,1" -e "s,^svn.*,$date-SVN,1")
if [ "$chrootcompileMode" = "gobo" ]
then
   package=`in_target in_chroot CreatePackage --no-sign --no-verify $name $finalversion`
   [ $? -ne 0 ] && Die "Error on CreatePackage"
   mkdir -p $putclean
   cp -v $root/$name--$finalversion* $putclean
   $(Boolean no-sign) || SignProgram ${putclean}/${name}--${finalversion}*--*
   oldunpacked="$targetunpacked/${name}"
else
   fullroot=`readlink -f $root`
   cd $root/View
   mkdir -p $fullroot/../$putclean/
   readlink -f $fullroot/../$putclean/$name--$finalversion--$targetarch.tar.bz2
   tar jcvpf $fullroot/../$putclean/$name--$finalversion--$targetarch.tar.bz2 $name/$finalversion
   oldunpacked="$fullroot/../$targetunpacked/${name}"
fi

# Remove the left over Area
cleanup
ret=$?
if [ -d "$root" ]
then 
   if [ $ret == 0 ]
   then $sudo_exec rm -rf "$root"
   else Log_Normal "Will not remove $root as it appears to be still in use."
   fi
fi

rm -rf "${oldunpacked}"
