#!/bin/sh 
#-e

function die() {
   echo "ChrootCompile: $*" >&2
   exit 1
}

#############################################################################
# Setting options
#############################################################################
export goboPrograms="/Programs"
chrootcompileMode="gobo"
[ -e "./Compile.conf" ] && chrootcompileCompileConf="./Compile.conf"

# allows one to override any of the three above variables 
[ -e "./ChrootCompile.conf" ] && source "./ChrootCompile.conf"

if [ "$UID" -ne 0 ]
then sudo=sudo
else sudo=
fi

#############################################################################
# '--local-repository' option: (to be used only on GoboLinux systems)
#############################################################################
unset localrepository
if [ "$1" == "--local-repository" -o "$1" == "-l" ]
then
    localrepository=yes
    shift
fi

hostarch=`uname -m`
case "$arch" in
   i686|i585|i486|i386) hostarch=i686 ;;
esac

unset crossopts
unset crossrepodir
unset crossprefixdir
unset crosskerneldir
unset crosstoolchaindir
if [ "$1" == "--cross-compile" -o "$1" == "-X" ]
then
    [ "$2" = "" ] && die "Expected architecture as a parameter."
    crossopts="--cross-compile $2"
    crossconf=`ls BaseDependencies/Compile/*/Resources/Defaults/Settings/Compile/Cross/Cross-$2.conf`

    [ ! -f $crossconf ] && die "$crossconf: file not found."
    eval `cat $crossconf | grep "cross_prefix_dir=" | sed 's/"//g'`
    eval `cat $crossconf | grep "cross_kernel_dir=" | sed 's/"//g'`
    eval `cat $crossconf | grep "cross_toolchain_dir=" | sed 's/"//g'`
    eval `cat $crossconf | grep "cross_uname_m=" | sed 's/"//g'`
    crossprefixdir=$cross_prefix_dir
    crosskerneldir=$cross_kernel_dir
    crosstoolchaindir=$cross_toolchain_dir
    crossrepodir="$crossprefixdir/$goboPrograms"
    arch=$cross_uname_m

    case "$arch" in
       arm*) recipesubdir=arm ;;
       *)    recipesubdir="$cross_uname_m"
    esac

    shift 2
else
    case "$hostarch" in
       i686|i585|i486|i386) recipesubdir=i686 ;;
       *)                   recipesubdir="$arch"
    esac
fi

targetarch=$recipesubdir

unset local_programs
if [ "$1" == "--local-programs" -o "$1" == "-p" ]
then
    local_programs="$1"
    shift
fi

unset verbose
if [ "$1" == "--verbose" -o "$1" == "-v" ]
then
    verbose="$1"
    shift
fi

if [ "$1" == "--help" ]
then
    echo "Usage: $0 [options] <recipe dir>"
    echo " "
    echo "Available options are:"
    echo "  -l, --local-repository:     use the repository at /Files/Compile (GoboLinux only)"
    echo "  -X, --cross-compile <arch>: cross-compile to 'arch' (GoboLinux only)"
    echo "  -p, --local-programs:       get packages from /Programs (EXPERIMENTAL)"
    echo "  -v, --verbose:              verbose output"
    exit 0
fi

#############################################################################
# Verify our whereabouts
#############################################################################
if [ ! -d BaseDependencies -a ! "$local_programs" ]
then
   if [ ! -z "`ls`" ]
   then die "This doesn't look like a ChrootCompile environment directory. Rerun this script on an empty directory to build an environment."
   fi
   SetupChrootEnv
fi

#############################################################################
# Which packages are required to run Compile
#############################################################################
base_dependencies=(
    "Linux-Headers" # needed to bootstrap Glibc
    "Glibc"
    "Ncurses"    # needed by Bash
    "Readline"   # needed by Bash
    "Bash"
    "CoreUtils"  # needed by Scripts (cp...)
    "Sed"        # needed by Scripts
    "PCRE"       # needed by Grep
    "Grep"       # needed by Scripts
    "Python"     # needed by Scripts
    "Gawk"       # needed by Compile
    "FindUtils"  # needed by Compile (find)
    "Bzip2"      # needed by Atool
    "Gzip"       # needed by Atool
    "Tar"        # needed by Atool
    "Perl"       # needed by Atool
    "Atool"      # needed by Compile
    "ZLib"       # needed by File
    "File"       # needed by Scripts
    "MkTemp"     # needed by Scripts
    "Mtail"      # needed by Scripts
    "BinUtils"   # needed by GCC (as)
    "GCC"
    "Sudo"       # needed by Scripts
    "Make"       # needed by Compile
    "Patch"      # needed by Compile
    "E2FSProgs"  # needed by Util-Linux (libblkid.so)
    "Util-Linux" # needed by Compile (mount)
    "DiffUtils"  # needed by Compile (diff)
    "Texinfo"    # needed by packages that generate info pages (makeinfo)
    "Scripts"
    "Compile"
)

export LANG=C
export LC_ALL=C


if [ -d "$1" -a -f "$1/Recipe" ]
then
   recipedir="$1"
   name=$(basename $(dirname $recipedir))
   version=$(basename $recipedir)
else
   die "Expected recipe directory as a parameter (example: Recipes/Bash/3.0)"
fi

echo "ChrootCompile: Compiling $name $version..."

#############################################################################
# Preparing stub root directory
#############################################################################
root=$PWD/Area-$name-$version
hostgetclean=Clean/$hostarch
targetgetclean=Clean/$targetarch
putclean=Clean/$targetarch

echo "ChrootCompile: Preparing $root..."

#############################################################################
# Setting signal handlers (cleanup before exit if interrupted)
#############################################################################

function unmount_dir() {
   [ "$verbose" ] && echo "ChrootCompile: Will unmount $point..."
   $sudo umount $1 2>&1 | grep -v "not mounted" /dev/null || true
}

function cleanup() {
   unset LANG LC_ALL
   for point in $root/Files/Compile/Archives $root/Files/Compile $crosstoolchaindir $crosskerneldir
   do
      unmount_dir $point
   done
   mount | grep "$root" | awk '{ print $3 }' | while read mp
   do 
      unmount_dir $mp
   done
   rmdir Archives 2> /dev/null
}

trap cleanup TERM STOP HUP EXIT

cleanup

if [ -d "$root" ]
then
   date=`date +%Y%m%d-%H%M`
   echo "Backing up old $root to $root-old-$date."
   $sudo mv $root $root-old-$date
fi

function create_root() {
   local chrootdir="$1"
   local prefix="$2"
   local rootdir="$1/$2"
   mkdir -p $rootdir
   mkdir -p $rootdir/System/Links/Executables
   mkdir -p $rootdir/System/Links/Environment
   mkdir -p $rootdir/System/Links/Libraries
   mkdir -p $rootdir/System/Links/Headers
   mkdir -p $rootdir/System/Links/Manuals
   mkdir -p $rootdir/System/Links/Shared
   mkdir -p $rootdir/System/Links/Tasks
   mkdir -p $rootdir/System/Settings
   mkdir -p $rootdir/System/Variable
   mkdir -p $rootdir/System/Variable/tmp
   mkdir -p $rootdir/System/Variable/log
   mkdir -p $rootdir/System/Kernel
   mkdir -p $rootdir/System/Kernel/Boot
   mkdir -p $rootdir/System/Kernel/Objects
   mkdir -p $rootdir/System/Kernel/Modules
   mkdir -p $rootdir/System/Kernel/Devices
   mkdir -p $rootdir/System/Kernel/Status
   mkdir -p $rootdir/Users
   mkdir -p $rootdir/Users/root
   mkdir -p $rootdir/Files
   mkdir -p $rootdir/Files/Compile
   mkdir -p $rootdir/Files/Compile/Archives
   mkdir -p $rootdir/Mount
   mkdir -p $rootdir/$goboPrograms
   mkdir -p $rootdir/usr

   mkdir -p $rootdir/Depot/$hostgetclean
   mkdir -p $rootdir/Depot/$targetgetclean

   ln -nfs $prefix/System/Kernel/Objects $rootdir/sys
   ln -nfs $prefix/System/Kernel/Devices $rootdir/dev
   ln -nfs $prefix/System/Kernel/Status $rootdir/proc
   ln -nfs $prefix/System/Variable $rootdir/var
   ln -nfs $prefix/System/Variable/tmp $rootdir/tmp
   ln -nfs $prefix/System/Links/Libraries $rootdir/lib
   ln -nfs $prefix/System/Settings $rootdir/etc
   ln -nfs $prefix/System/Links/Executables $rootdir/bin
   ln -nfs $prefix/System/Links/Executables $rootdir/sbin

   ln -nfs . $rootdir/usr/X11R6
   ln -nfs . $rootdir/usr/local
   ln -nfs $prefix/System/Links/Executables $rootdir/usr/bin
   ln -nfs $prefix/System/Links/Headers $rootdir/usr/include
   ln -nfs $prefix/System/Links/Libraries $rootdir/usr/lib
   ln -nfs $prefix/System/Links/Manuals $rootdir/usr/man
   ln -nfs $prefix/System/Links/Executables $rootdir/usr/sbin
   ln -nfs $prefix/System/Links/Shared $rootdir/usr/share

   if [ ! -z "$prefix" ]
   then
       ln -nfs .. $rootdir/$prefix
       ln -nfs $chrootdir/System/Settings/Compile $rootdir/System/Settings/
       ln -nfs $chrootdir/System/Settings/Scripts $rootdir/System/Settings/
   fi

   chmod 777 $rootdir/System/Variable/tmp # Fibo also wants to write temp files
}

create_root $root
[ "$hostarch" != "$targetarch" ] && create_root $root $crossprefixdir

#############################################################################
# Copying recipes to root directory
#############################################################################

if [ -d Recipes ]
then
   cp -rL Recipes $root/Files/Compile
else
   echo "Warning, ./Recipes not found. Skipping copy of recipes inside $root"
   echo "Assuming use of local repository from host's /Files/Compile."
   localrepository=yes
fi

if [ "$localrepository" ]
then
    [ "$verbose" ] && echo "ChrootCompile: bind-mounting /Files/Compile inside $root"
    $sudo mount --bind /Files/Compile $root/Files/Compile

    if [ ! -z "$crosskerneldir" ]
    then
        [ "$verbose" ] && echo "ChrootCompile: bind-mounting $crosskerneldir inside $root"
        mkdir -p $root/$crosskerneldir
        $sudo mount --bind $crosskerneldir $root/$crosskerneldir
    fi
fi

#############################################################################
# Getting packages for BaseDependencies - Temporary only
#############################################################################
if [ ! "$local_programs" ]
then
   for arch in $hostarch $targetarch
   do
      [ -d Unpacked/$arch ] || mkdir -p Unpacked/$arch
      [ -d Unpacked/$arch/_Checksums ] || mkdir -p Unpacked/$arch/_Checksums
   done
   [ -d BaseDependencies ] || mkdir BaseDependencies

fi

[ -d $hostgetclean ] || mkdir -p $hostgetclean
for dep in "${base_dependencies[@]}"
do
   if ! ls BaseDependencies/$dep--* &> /dev/null && ! ls $hostgetclean/$dep--* &> /dev/null \
   && ! [ -d BaseDependencies/$dep -o -d $hostgetclean/$dep ] \
   && [ "$local_packages" -a ! -d "/Programs/$dep/Current/" ]
   then
      die "Package $dep, needed for bootstrap, was not found."
   fi
done

#############################################################################
# Installing base packages inside root directory
#############################################################################
echo "ChrootCompile: Installing base packages inside $root..."

function filter_dir() {
   grep -v Settings | grep -v Variable | grep -v Current
}

function get_package_for() {
   local dep="$1"
   local repositories="$2"
   local pkg=
   for repo in $repositories
   do
      [ `ls $repo/$dep--* 2> /dev/null | wc -l` -gt 1 ] && {
         die "More than one entry for $dep in $repo/ directory."
      } || true
      pkg=`ls $repo/$dep--* 2> /dev/null || true`
      [ "$pkg" ] && break
   done
   echo "$pkg"
}

function unpack_package() {
   local pkg="$1"
   local dep="$2"
   local arch="$3"

   packagemd5=`md5sum $pkg`

   # This seems to be broken, as $repo isn't being set here
   [ `ls $repo/$dep 2> /dev/null | filter_dir | wc -l` -gt 1 ] && rm -rf "Unpacked/$arch/$dep" || true

   if [ "`cat Unpacked/$arch/_Checksums/$dep 2> /dev/null`" !=  "$packagemd5" ]
   then
      # We may enter here even if "Unpacked/$arch/$dep" does not exists. Notice the '-f' of rm.
      # cleanup old md5 file
      rm -f Unpacked/$arch/_Checksums/$dep
      # remove the installed package: $package was updated 
      rm -rf "Unpacked/$arch/$dep"
   fi

   unpacked=`ls -d Unpacked/$arch/$dep/* 2> /dev/null | filter_dir || true`
   if [ ! "$unpacked" ]
   then
      echo "Unpacking $pkg..." >&2
      tar xfj "$pkg" -C Unpacked/$arch
      unpacked=`ls -d Unpacked/$arch/$dep/* 2> /dev/null | filter_dir`
      [ "$unpacked" ] || die "Error unpacking $pkg"
   fi
   echo "$packagemd5" > Unpacked/$arch/_Checksums/$dep
   echo "$unpacked"
}

function load_dependency() {
   local dep="$1"
   local repositories="$2"
   local arch="$3"
   if [ "$local_programs" ]
   then
      unpacked="/Programs/$dep/Current/"
      [ -d $unpacked ] || die "Dependency $dep could not be found."
   else
      local pkg=`get_package_for "$dep" "$repositories"`
      [ ! "$pkg" ] && die "Dependency $dep could not be found. You may need to get the package and put it at $hostgetclean."
      unpacked=`unpack_package "$pkg" "$dep" "$arch"`
   fi
   if [ $dep = $name ]
   then realcopy="--real-copy"
   else realcopy=""
   fi
   if [ "$arch" = "$hostarch" ]
   then params=""
   else params=$crossprefixdir
   fi
   $sudo MiniInstallPackage $realcopy $verbose "$unpacked" "$root" $params
}

hostdeps=`{
   echo "${base_dependencies[*]} " | tr " " "\n" 
   [ -e "$1/Resources/BuildDependencies" ] && cut -d" " -f1 "$1/Resources/BuildDependencies"
} | sort -u | strings -n 1`

targetdeps=`{
   [ -e "$1/Resources/Dependencies" ] && cut -d" " -f1 "$1/Resources/Dependencies"
} | sort -u | strings -n 1`

targetroot=$root/$crossprefixdir
if [ "$crossopts" ]
then targetrepository="$targetgetclean"
else targetrepository="$targetgetclean BaseDependencies"
fi

needsprocessing="yes" 
while [ $needsprocessing = "yes" ]
do
   needsprocessing="no"
   for dep in $hostdeps
   do
      [ -d $root/$goboPrograms/$dep ] && continue
      echo Installing \"$dep\"...
      load_dependency "$dep" "$hostgetclean BaseDependencies" "$hostarch"

      # if just loaded dependency doesn't have a Dependencies file, skip to next entry
      [ ! -e $root/$goboPrograms/$dep/Current/Resources/Dependencies ] && continue
      
      # for each program at dependencies list (no version handling)...
      for i in `cat $root/$goboPrograms/$dep/Current/Resources/Dependencies | cut -f1 -d' '`
      do
         # if the program is not already at dependencies list, append it and force extra recursion
         if [ ! "`echo $hostdeps | grep -w  $i`" -a "$i" != '#' ]
         then
            echo "  Adding dependency $i"
            hostdeps="$hostdeps $i"
            needsprocessing="yes"
         fi
      done
   done
   
   for dep in $targetdeps
   do
      [ -d $targetroot/$goboPrograms/$dep ] && continue
      if [ "$hostarch" = "$targetarch" ]
      then echo Installing \"$dep\"...
      else echo Installing \"$dep\" for $targetarch...
      fi
      load_dependency "$dep" "$targetrepository" "$targetarch"
      [ ! -e $targetroot/$goboPrograms/$dep/Current/Resources/Dependencies ] && continue

      for i in `cat $targetroot/$goboPrograms/$dep/Current/Resources/Dependencies | cut -f1 -d' '`
      do
         if [ ! "`echo $hostdeps | grep -w  $i`" -a "$i" != '#' ]
         then
            echo "  Adding dependency $i"
            targetdeps="$targetdeps $i"
            needsprocessing="yes"
         fi
      done
   done
done

#############################################################################
# Creating files at $root/System/Settings/ 
# => passwd, group, sudoers, resolv.conf, hosts, fstab
#############################################################################
[ "$verbose" ] && echo "ChrootCompile: Creating files at /System/Settings..."

function sudo_rm_if_e() {
   if [ -e "$1" ]
   then
      [ "$verbose" ] && echo "ChrootCompile: removing $1..."
      $sudo rm -f "$1"
   else
      return 0
   fi
}

sudo_rm_if_e $root/System/Settings/passwd
cat <<EOF > $root/System/Settings/passwd
root:x:0:0:Gobo:/Users/root:/bin/bash
fibo:x:21:21:Fibo:/tmp:/bin/bash
EOF

sudo_rm_if_e $root/System/Settings/group
cat <<EOF > $root/System/Settings/group
root:x:0:root
sys:x:2:root
tty:x:4:
fibo:x:21:fibo
EOF

hostname=`hostname`
sudo_rm_if_e $root/System/Settings/hosts
cat <<EOF > $root/System/Settings/hosts
127.0.0.1 localhost $hostname
EOF

sudo_rm_if_e $root/$goboPrograms/Sudo/Settings/sudoers
sudo chmod 777 $root/$goboPrograms/Sudo/Settings
cat <<EOF > $root/$goboPrograms/Sudo/Settings/sudoers
root ALL=(ALL) NOPASSWD: ALL
EOF
sudo chmod 755 $root/$goboPrograms/Sudo/Settings

$sudo chmod 440 $root/$goboPrograms/Sudo/Settings/sudoers
$sudo chown 0:0 $root/$goboPrograms/Sudo/Settings/sudoers
sudo_rm_if_e $root/System/Settings/sudoers
ln -nfs /$goboPrograms/Sudo/Settings/sudoers $root/System/Settings/sudoers
touch $root/System/Settings/fstab

# This should limit network access inside the chroot
#cp /etc/resolv.conf $root/System/Settings/resolv.conf

#############################################################################
# Binding /dev, /proc and ./Archives inside root directory
#############################################################################
$sudo mount --bind /dev $root/System/Kernel/Devices
$sudo mount --bind /proc $root/System/Kernel/Status

[ -d ./Archives ] || mkdir ./Archives
[ ! "$localrepository" ] && $sudo mount --bind Archives $root/Files/Compile/Archives

$sudo mount --bind $hostgetclean $root/Depot/$hostgetclean
$sudo mount --bind $targetgetclean $root/Depot/$targetgetclean

if [ "$crossopts" ]
then
    mkdir -p $root/$crosstoolchaindir
    $sudo mount --bind $crosstoolchaindir $root/$crosstoolchaindir
fi

#############################################################################
# Download required archives to ./Archives
#############################################################################

function fetch_included_recipes() {
   local ipkg="$2"
   local ver="$3"
   local recipedirs="$1/../../"

   if [ "$localrepository" ]
   then
       recipedirs[0]=/Files/Compile/LocalRecipes
       recipedirs[1]=/Files/Compile/Recipes
   fi

   for dir in ${recipedirs[@]}
   do
      pushd "$dir" &> /dev/null
      pkg=`ls | grep -i "^$ipkg$"`
      popd &> /dev/null
      [ ! "$pkg" ] && continue
      fetch_archive_off_recipe "$dir/$pkg/$ver" && return || die
   done
   die "Can't find recipe for $ipkg"
}

function fetch_archive_off_recipe() {
   (
      if wget --help | grep -q no-check-certificate
      then local wget="wget --no-check-certificate"
      else local wget="wget"
      fi
      unset is_meta
      unset include
      [ "$verbose" ] && echo "Fetching files for $1/Recipe..."
      [ -f "$1/Recipe" ] || die "Can't find $1/Recipe."
      source "$1/Recipe"
      if [ -f "$1/$recipesubdir/Recipe" ]
      then source "$1/$recipesubdir/Recipe"
      fi
      if [ "$is_meta" = "yes" ]
      then
         for pkgver in "${include[@]}"
         do
            ipkg="${pkgver%--*}"
            ver="${pkgver#*--}"
            fetch_included_recipes "$1" "$ipkg" "$ver"
         done
      else
         cd "$root/Files/Compile/Archives"
         if [ "$url" ]
         then
            file=`basename "$url"`
            [ ! -e "$file" ] && { $wget -c "$url" || die "Couldn't fetch $url" ;} || true
         fi
         if [ "${urls[*]}" ]
         then
            for url in "${urls[@]}"
            do
               file=`basename "$url"`
               [ ! -e "$file" ] && { $wget -c "$url" || die "Couldn't fetch $url" ;} || true
            done
         fi
      fi
   ) || die
}

[ "$chrootcompileCompileConf" ] || chrootcompileCompileConf="$root/$goboPrograms/Compile/Settings/Compile/Compile.conf"
source "$chrootcompileCompileConf"

fetch_archive_off_recipe "$1"

#############################################################################
# Setting LD_LIBRARY_PATH variable which will be used on chrooted operations
#############################################################################
export LD_LIBRARY_PATH=/System/Links/Libraries

function in_chroot() {
   $sudo chroot $root "$@"
}

[ "$verbose" ] && echo "ChrootCompile: Will run ldconfig..."
in_chroot ldconfig

if [ -e Directories.conf ]
then
   $sudo cp Directories.conf $root/$goboPrograms/Scripts/Settings/Scripts/Directories.conf
fi

if ! [ "$chrootcompileMode" = "gobo" ]
then
   ln -nfs $crossprefixdir/Programs $root/View
fi

#############################################################################
# Let the compilation begin!
#############################################################################

# Only local packages are used to fullfil dependencies
$sudo bash -c "echo 'defaultRepositories=( local_package )' > $root/$goboPrograms/Scripts/Settings/Scripts/FindPackage.conf"
$sudo bash -c "echo 'defaultLocalPackagesPaths=( /Depot/$targetgetclean ; )' >> $root/$goboPrograms/Scripts/Settings/Scripts/GetAvailable.conf"

function check_dependencies() {
   [ "$verbose" ] && echo "ChrootCompile: Checking dependencies..."
   
   in_chroot CheckDependencies --no-web --add-self=never --mode=missing "$name" "$version" recipe | while read depnam depver deptyp depurl
   do
      [ "$depnam" ] || continue
      case $deptyp in
      installed)
         : # ok, skip
         ;;
      local_package)
         in_chroot InstallPackage --no-web $depurl || die "Installation of dependency $depnam $depver failed ($depurl used)."
         ;;
      None)
         die "ChrootCompile: Unresolved dependency: $depnam $depver"
         ;;
      *)
         die "ChrootCompile: Dependency not available as a package: $depnam $depver ($deptype found)."
         ;;
      esac
   done
}

# disabled for now
# check_dependencies

echo "ChrootCompile: Will run Compile..."
export NO_UNIONFS=1
unset failed
in_chroot Compile --batch --no-web --no-symlink --no-sign $crossopts $name $version || failed=yes
if [ "$failed" ]
then
    echo "Compilation failed, invoking bash for debugging purposes."
    in_chroot /bin/bash
    die "Finished with errors."
fi

#############################################################################
#  After the compilation is done,
#  pack the program and copy the resulting package to './$putclean', the place
#  of pure packages
#############################################################################

function in_target() {
   [ "$crossopts" ] && export goboCrossCompiling=yes
   $@
   ret=$?
   [ "$crossopts" ] && unset goboCrossCompiling
   return $ret
}

# FIXME: Should be based on Directories.conf
if [ "$chrootcompileMode" = "gobo" ]
then
   package=`in_target in_chroot CreatePackage --no-sign --no-verify $name $version`
   mkdir -p $putclean
   cp -v $root/$name--$version* $putclean
else
   fullroot=`readlink -f $root`
   cd $root/View
   mkdir -p $fullroot/../$putclean/
   readlink -f $fullroot/../$putclean/$name--$version--$arch.tar.bz2
   tar jcvpf $fullroot/../$putclean/$name--$version--$arch.tar.bz2 $name/$version
fi

# Remove the left over Area
cleanup
[ -d "$root" ] && rm -rf "$root"
