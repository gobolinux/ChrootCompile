#!/bin/bash

#############################################################################
# Imports
#############################################################################
source ScriptFunctions
Import GoboLinux
Import OptionParser
Import Bootstrap

#############################################################################
# Setting options
#############################################################################
scriptCredits="Copyright (C) 2005-2006 Hisham H. Muhammad. Released under the GNU GPL."
scriptUsage="[options] { <recipe> [<version>] | <path_to_recipe> }"
Add_Option_Boolean "l" "local-repository" "Look at the local repository for recipes." ""
Add_Option_Boolean "r" "revisions-tree" "Look at the local revisions tree for recipes (implies --local-repository)." ""
Add_Option_Boolean "n" "new-names" "Compile using new names from /System/Index hierarchy." ""
Add_Option_Boolean "p" "local-programs" "Take entries from /Programs (use with care)." ""
Add_Option_Boolean "s" "setup-environment" "Creates the chroot environment by calling SetupChrootEnv" ""
Add_Option_Boolean "t" "use-tmpfs" "Uncompress and build sources on tmpfs. Contents will be discarded after compilation finishes." ""
Add_Option_Entry "X" "cross-compile" "Use a cross-compiler according to the configuration in Cross-<parameter>.conf." ""
Add_Option_Entry "d" "use-directory" "Use specified directory as root for ChrootCompile." ""
Add_Option_Boolean "S" "no-sign" "Do not try to sign the resulting package."
Add_Option_Boolean "D" "no-debug" "Do not invoke bash if compilation fails."
Add_Option_Boolean "W" "no-web" "Do not download precompiled packages from the web when Dependencies are not found." ""
Add_Option_Boolean "R" "no-recursive" "Do not recursively ChrootCompile dependencies that doesn't have a package." ""
scriptExample="--local-repository /Files/Compile/LocalRecipes/Foo/1.0"
helpOnNoArguments=yes
Parse_Options "$@"


#############################################################################
# Default options
#############################################################################
chrootcompileMode=gobo


#############################################################################
# Operation
#############################################################################
Parse_Conf Compile/Compile.conf
Parse_Conf ChrootCompile.conf

Is_Entry "use-directory" && chrootCompileDir="$(Entry 'use-directory')"

if [ "$UID" -eq 0 ]
then sudo_exec=
fi

unset localrepository
Boolean "local-repository" && localrepository=yes

unset userevisionstree
if Boolean "revisions-tree"
then
    Parse_Conf --mandatory "DevelScripts/CompileSubversion.conf"
    userevisionstree=yes
    localrepository=yes
fi

unset nodebug
Boolean "no-debug" && nodebug=yes

unset noweb
Boolean "no-web" && noweb=yes

unset usetmpfs
Boolean "use-tmpfs" && usetmpfs=yes

unset norecursive
Boolean "no-recursive" && norecursive=yes

hostarch=`uname -m`
case "$hostarch" in
   i686|i585|i486|i386) hostarch=i686 ;;
esac

unset crossopts
unset crossrepodir
unset crossprefixdir
unset crosskerneldir
unset crosstoolchaindir
if Is_Entry "cross-compile"
then
    arch_conf=`Entry "cross-compile"`
    crossopts="--cross-compile $arch_conf"
    crossconf="$goboSettings/Compile/Cross/Cross-$arch_conf.conf"
    [ ! -f $crossconf ] && Die "$crossconf: file not found."
    compileSourcesDir="$compileDir/Sources-$arch_conf"

    eval $(grep "cross_prefix_dir="    $crossconf)
    eval $(grep "cross_kernel_dir="    $crossconf)
    eval $(grep "cross_toolchain_dir=" $crossconf)
    eval $(grep "cross_uname_m="       $crossconf)
    crossprefixdir=$cross_prefix_dir
    crosskerneldir=$cross_kernel_dir
    crosstoolchaindir=$cross_toolchain_dir
    crossrepodir="$crossprefixdir/$goboPrograms"

    case "$cross_uname_m" in
       arm*) recipesubdir=arm ;;
       *)    recipesubdir="$cross_uname_m"
    esac
else
    case "$hostarch" in
       i686|i585|i486|i386) recipesubdir=i686 ;;
       *)                   recipesubdir="$hostarch"
    esac
fi

if [ "$goboPrefix" ]
then programs=`echo $goboPrograms | sed "s,^$goboPrefix,,g"`
else programs=$goboPrograms
fi

targetarch=$recipesubdir

unset local_programs
Boolean "local-programs" && local_programs=yes

unset verbose
Boolean "verbose" && verbose="--verbose"

#############################################################################
# Verify our whereabouts
#############################################################################
[ "$chrootCompileDir" ] && cd "$chrootCompileDir"

if Boolean "setup-environment" || [ ! -d BaseDependencies -a ! "$local_programs" ]
then
    if [ ! -z "`ls`" ]
    then Die "You need to create a directory in which you should run ChrootCompile, where it will store its data files and create its chroot jails. Create an empty dir and run ChrootCompile from there."
    fi
    if [ "$chrootCompileDir" ]
    then dirname="$chrootCompileDir"
    else dirname="$PWD"
    fi
    Log_Normal "No ChrootCompile environment found in $dirname. Setting things up..."
    SetupChrootEnv
    [ -z "$(Arg 1)" ] && exit 0
fi

if [ -z "$(Arg 1)" ]
then Die "You must specify a program to compile. Use '--help' for help."
fi

#############################################################################
# Which packages are required to run Compile
#############################################################################
base_dependencies=(
    "Linux-Headers" # needed to bootstrap Glibc
    "Gawk"       # needed by Compile and to bootstrap Glibc
    "Glibc"
    "Ncurses"    # needed by Bash
    "Readline"   # needed by Bash
    "Bash"
    "CoreUtils"  # needed by Scripts (cp...)
    "Sed"        # needed by Scripts
    "PCRE"       # needed by Grep
    "Grep"       # needed by Scripts
    "Python"     # needed by Scripts
    "FindUtils"  # needed by Compile (find)
    "DB"         # needed by Perl on 013
    "Bzip2"      # needed by Atool
    "Gzip"       # needed by Atool
    "Tar"        # needed by Atool
    "Unzip"      # needed by Atool
    "Perl"       # needed by Atool
    "Atool"      # needed by Compile
    "ZLib"       # needed by File
    "File"       # needed by Scripts
    "MkTemp"     # needed by Scripts
    "Mtail"      # needed by Scripts
    "BinUtils"   # needed by GCC (as)
    "GCC"
    "Sudo"       # needed by Scripts
    "Make"       # needed by Compile
    "Patch"      # needed by Compile
    "E2FSProgs"  # needed by Util-Linux (libblkid.so)
    "Util-Linux" # needed by Compile (mount)
    "DiffUtils"  # needed by Compile (diff)
    "Texinfo"    # needed by packages that generate info pages (makeinfo)
    "Udev"       # needed when using a FUSE based unionfs implementation
    "Fuse"       # needed by UnionFS-Fuse
    "UnionFS-Fuse"
    "Scripts"
    "Compile"
)

cross_blacklist=(
    "GCC"
)

export LANG=C
export LC_ALL=C

if [ "$(Arg 2)" ]
then
   name="$(Arg 1)"
   version="$(Arg 2)"
   parsedoptions=$(echo $(Get_Parsed_Options) | awk {' $(NF-1)=""; $NF=""; print '})
else
   if [ -d "$(Arg 1)" ]
   then
      name=$(basename $(dirname $(Arg 1)))
      version=$(basename $(Arg 1))
   else
      name="$(Arg 1)"
      version=""
   fi
   numargs=$(( ${#userargs[@]} - 1 ))
   parsedoptions=$(echo $(Get_Parsed_Options) | awk {' $NF=""; print '})
fi

function locate_recipe() {
   for trydir in "${trydirs[@]}"
   do
      recipedir="`GuessLatest $trydir/$name/$version*`"
      if [ -e "$recipedir/Recipe" ]
      then
         setversion=$(basename "$recipedir")
         if ! [ "$version" ]
         then
            # If it made a decision, check if it picked the right recipe
            if ! Boolean "batch" && [ `ls $trydir/$name/$version* | wc -l` -gt 1 ]
            then Ask_Continue "Will compile $name $setversion from $trydir..."
            fi
         fi
         version="$setversion"
         break
      else
         recipedir=""
      fi
   done
}

name=$(GuessProgramCase ${name})
if [ "$localrepository" ]
then trydirs=(${compileLocalRecipesDir} "${compileRecipeDirs[@]}" ${compileGetRecipeDir})
else trydirs=(Recipes)
fi

if [ "$userevisionstree" ]
then trydirs=(${compileSubversionLocalRevisions} "${trydirs[@]}")
fi

locate_recipe

if [ ! "$noweb" -a ! "$recipedir" -a "$localrepository" ]
then
   GetRecipe $name $version && locate_recipe
fi

if ! [ "$recipedir" ]
then
   Die "Could not find recipe for $name $version"
fi

Log_Normal "ChrootCompile: Compiling $name $version..."

#############################################################################
# Preparing stub root directory
#############################################################################
root=$PWD/Area-$name-$version
hostgetclean=Clean/$hostarch
targetgetclean=Clean/$targetarch
putclean=Clean/$targetarch
hostdepsdownload=Downloaded/$hostarch
targetdepsdownload=Downloaded/$targetarch

mkdir -p $hostgetclean
mkdir -p $targetgetclean
mkdir -p $hostdepsdownload
mkdir -p $targetdepsdownload

Log_Normal "ChrootCompile: Preparing $root..."

#############################################################################
# Setting signal handlers (cleanup before exit if interrupted)
#############################################################################

function cleanup() {
   local ret=0
   local quiet="$1"
   unset LANG LC_ALL

   function unmount_dir() {
      local mp=$(readlink -f "$1")
      Log_Verbose "Unmounting $mp..."
      if grep -q "$mp" /proc/mounts
      then $sudo_exec umount "$mp"
      else true
      fi
      ret=$?
   }

   if [ "$quiet" ]
   then unmount="Quiet unmount_dir"
   else unmount="unmount_dir"
   fi

   # umount batch
   for dep in $hostdeps $targetdeps
   do
      local depversion="$(ls $root/Programs/$dep/ 2> /dev/null | grep -v "Settings\|Current")"
      $unmount "${root}Programs/$dep/$depversion"
   done
   if [ "$crossopts" ]
   then
      [ -d "$cross_prefix_dir/$goboModules" ] && $unmount "${root}$cross_prefix_dir/$goboModules"
      $unmount ${root}$crosstoolchaindir
   fi
   $unmount ${root}Depot/$targetgetclean
   $unmount ${root}Depot/$hostgetclean
   $unmount ${root}System/Kernel/Status
   $unmount ${root}System/Kernel/Devices
   [ "$userevisionstree" ] && $unmount "${root}$compileSubversionLocalRevisions"
   [ "$usetmpfs" ] && $unmount $(readlink -f ${root}$compileSourcesDir)
   if [ ! "$localrepository" ]
   then
      $unmount "$root/Files/Compile/Archives"
   else
      [ -d "$crosskerneldir" ] && $unmount "${root}$crosskerneldir"
      $unmount "${root}Files/Compile"
   fi
   rmdir Archives 2> /dev/null
   return $ret
}

trap cleanup TERM STOP HUP EXIT

cleanup "quiet" || Log_Terse "At least one mountpoint was not cleanly unmounted."

if [ -d "$root" ]
then
   date=`date +%Y%m%d-%H%M`
   Log_Normal "Backing up old $root to $root-old-$date."
   $sudo_exec mv $root $root-old-$date
fi

function create_root() {
   local chrootdir="$1"
   local prefix="$2"
   local rootdir="$chrootdir/$prefix"

   if Boolean "new-names"
   then Create_Filesystem_Tree "$rootdir" "gobo" "true"
   else Create_Filesystem_Tree "$rootdir" "gobo"
   fi

   Create_Device_Nodes "$rootdir"

   mkdir -p $rootdir/Depot/$hostgetclean
   mkdir -p $rootdir/Depot/$targetgetclean

   if [ ! -z "$prefix" ]
   then
       # this should point to the temporary environment set by chrootcompile
       mkdir -p ${rootdir}/${prefix%/*}
       ln -nfs .. $rootdir/$prefix

       # these are needed by Compile and need to point to chrootcompile's rootfs;
       # note that at run time /System/Settings represents chrootcompile's Scripts
       # version and not the one from the host
       ln -s /System/Settings/Compile $rootdir/System/Settings/
       ln -s /System/Settings/Scripts $rootdir/System/Settings/
   fi
}

create_root $root
[ "$hostarch" != "$targetarch" ] && create_root $root $crossprefixdir

#############################################################################
# Copying recipes to root directory
#############################################################################

if [ -d Recipes ]
then
   cp -rL Recipes $root/Files/Compile
else
   Log_Terse "Warning, ./Recipes not found. Skipping copy of recipes inside $root"
   Log_Terse "Assuming use of local repository from host's ${compileDir}."
   localrepository=yes
fi

if [ "$localrepository" ]
then
    Log_Normal "ChrootCompile: bind-mounting ${compileDir} inside $root"
    $sudo_exec mount --bind ${compileDir} $root/Files/Compile

    if [ -d "$crosskerneldir" ]
    then
        Log_Verbose "ChrootCompile: bind-mounting $crosskerneldir inside $root"
        mkdir -p $root/$crosskerneldir
        $sudo_exec mount --bind $crosskerneldir $root/$crosskerneldir
    fi
fi

if [ "$userevisionstree" ]
then
    Log_Verbose "ChrootCompile: bind-mounting ${compileSubversionLocalRevisions} inside $root"
    $sudo_exec mkdir -p $root/$compileSubversionLocalRevisions
    $sudo_exec mount --bind ${compileSubversionLocalRevisions} $root/$compileSubversionLocalRevisions
fi

[ "$usetmpfs" ] && mount -t tmpfs none ${root}/$compileSourcesDir

#############################################################################
# Getting packages for BaseDependencies - Temporary only
#############################################################################
if [ ! "$local_programs" ]
then
   for arch in $hostarch $targetarch
   do
      [ -d Unpacked/$arch ] || mkdir -p Unpacked/$arch
      [ -d Unpacked/$arch/_Checksums ] || mkdir -p Unpacked/$arch/_Checksums
   done
   [ -d BaseDependencies ] || mkdir BaseDependencies

fi

[ -d $hostgetclean ] || mkdir -p $hostgetclean
for dep in "${base_dependencies[@]}"
do
   if ! ls BaseDependencies/$dep--* &> /dev/null && ! ls $hostgetclean/$dep--* &> /dev/null \
   && ! [ -d BaseDependencies/$dep -o -d $hostgetclean/$dep ] \
   && [ "$local_packages" -a ! -d "/Programs/$dep/Current/" ]
   then
      Die "Package $dep, needed for bootstrap, was not found."
   fi
done

#############################################################################
# Installing base packages inside root directory
#############################################################################
Log_Normal "ChrootCompile: Installing base packages inside $root..."

function filter_dir() {
   grep -v \/Settings\/ | grep -v \/Variable\/ | grep -v \/Current\/
}

function get_package_for() {
   local dep="$1"
   local repositories="$2"
   local pkg=
   for repo in $repositories
   do
      [ `ls $repo/$dep--* 2> /dev/null | wc -l` -gt 1 ] && {
         Die "More than one entry for $dep in $repo/ directory."
      } || true
      pkg=`ls $repo/$dep--* 2> /dev/null || true`
      [ "$pkg" ] && break
   done
   echo "$pkg"
}

function unpack_package() {
   local pkg="$1"
   local dep="$2"
   local arch="$3"

   packagemd5=`md5sum $pkg`

   # This seems to be broken, as $repo isn't being set here
   [ `ls $repo/$dep 2> /dev/null | filter_dir | wc -l` -gt 1 ] && rm -rf "Unpacked/$arch/$dep" || true

   if [ "`cat Unpacked/$arch/_Checksums/$dep 2> /dev/null`" !=  "$packagemd5" ]
   then
      # We may enter here even if "Unpacked/$arch/$dep" does not exists. Notice the '-f' of rm.
      # cleanup old md5 file
      rm -f Unpacked/$arch/_Checksums/$dep
      # remove the installed package: $package was updated 
      rm -rf "Unpacked/$arch/$dep"
   fi

   unpacked=`ls -d Unpacked/$arch/$dep/* 2> /dev/null | filter_dir || true`
   if [ ! "$unpacked" ]
   then
      echo "Unpacking $pkg..." >&2
      tar xfj "$pkg" -C Unpacked/$arch
      unpacked=`ls -d Unpacked/$arch/$dep/* 2> /dev/null | filter_dir`
      [ "$unpacked" ] || Die "Error unpacking $pkg"
   fi
   echo "$packagemd5" > Unpacked/$arch/_Checksums/$dep
   echo "$unpacked"
}
   
function download_dependency() {
   local pkg=$(FindPackage -t official_package "$1")
   local depsdir="$2"
   [ "$pkg" ] && wget "$pkg" || return
   mv "$(basename "$pkg")" "$depsdir"
   pkg=`ls $depsdir/$dep--* 2> /dev/null || true`
   echo "$pkg"
}

function compile_dependency() {
   local recipe=$(GetRecipe $1 $2)
   echo ChrootCompile $parsedoptions $recipe
   if [ "$recipe" ]
   then ChrootCompile $parsedoptions $recipe
   fi
}

function load_dependency() {
   local dep="$1"
   local repositories="$2"
   local arch="$3"
   if [ "$local_programs" ]
   then
      unpacked="/Programs/$dep/Current/"
      if [ ! -d $unpacked ]
      then
         Die "Dependency $dep could not be found."
      fi
   else
      local pkg=`get_package_for "$dep" "$repositories"`
	  local depsdir="$(echo $repositories | awk {'print $NF'})"
      [ ! "$pkg" ] && pkg=`download_dependency "$dep" "$depsdir"`
      [ ! "$pkg" -a ! "$norecursive" ] && compile_dependency $dep && pkg=`get_package_for "$dep" "$putclean"`
      [ ! "$pkg" ] && Die "Dependency $dep could not be found. You may need to get the package and put it at $depsdir."
      unpacked=`unpack_package "$pkg" "$dep" "$arch"`
   fi
   if [ $dep = $name ]
   then realcopy="--real-copy"
   else realcopy=""
   fi
   if [ "$arch" = "$hostarch" ]
   then params=""
   else params=$crossprefixdir
   fi
   unset usenewnames
   Boolean "new-names" && usenewnames="--new-names"
   $sudo_exec MiniInstallPackage $realcopy $verbose $usenewnames "$unpacked" "$root" $params
}

function is_blacklisted() {
   for crossdep in "${cross_blacklist[@]}"
   do
      [ "$crossdep" = "$1" ] && return 0
   done
   return 1
}

hostdeps=$({
   echo "${base_dependencies[*]} " | tr " " "\n" 
   [ -e "${recipedir}/Resources/BuildDependencies" ] && cut -d" " -f1 "${recipedir}/Resources/BuildDependencies" | sed '/^#.*/d'
} | sort -u | strings -n 1)

targetdeps=$({
   [ -e "${recipedir}/Resources/Dependencies" ] && cut -d" " -f1 "${recipedir}/Resources/Dependencies" | sed '/^#.*/d'
} | sort -u | strings -n 1)

targetroot=$root/$crossprefixdir
if [ "$crossopts" ]
then targetrepository="$targetgetclean"
else targetrepository="$targetgetclean BaseDependencies"
fi

needsprocessing="yes" 
while [ $needsprocessing = "yes" ]
do
   needsprocessing="no"
   for dep in $hostdeps
   do
      [ -d $root/$programs/$dep ] && continue
      echo Installing \"$dep\"...
      load_dependency "$dep" "$hostgetclean BaseDependencies $hostdepsdownload" "$hostarch"

      # if just loaded dependency doesn't have a Dependencies file, skip to next entry
      [ ! -e $root/$programs/$dep/Current/Resources/Dependencies ] && continue
      
      # for each program at dependencies list (no version handling)...
      for i in `cat $root/$programs/$dep/Current/Resources/Dependencies | grep -v '^[ ]*#' | cut -f1 -d' '`
      do
         # if the program is not already at dependencies list, append it and force extra recursion
         if [ ! "`echo $hostdeps | grep -w  $i`" ]
         then
            echo "  Adding dependency $i"
            hostdeps="$hostdeps $i"
            needsprocessing="yes"
         fi
      done
   done
   
   for dep in $targetdeps
   do
      [ -d $targetroot/$programs/$dep ] && continue
      if [ "$hostarch" = "$targetarch" ]
      then echo Installing \"$dep\"...
      elif is_blacklisted $dep
      then continue
      else echo Installing \"$dep\" for $targetarch...
      fi
      load_dependency "$dep" "$targetrepository $targetdepsdownload" "$targetarch"
      [ ! -e $targetroot/$programs/$dep/Current/Resources/Dependencies ] && continue

      # FIXME: There's (almost) duplicated right above...
      # It took me quite a while to figure out what was going on
      # when I fixed a bug above and didn't catch the same error here.
      for i in `cat $targetroot/$programs/$dep/Current/Resources/Dependencies | grep -v '^[ ]*#' | cut -f1 -d' '`
      do
         if [ ! "`echo $hostdeps | grep -w  $i`" ]
         then
            echo "  Adding dependency $i"
            targetdeps="$targetdeps $i"
            needsprocessing="yes"
         fi
      done
   done
done

#############################################################################
# Creating files at $root/System/Settings/ 
# => passwd, group, sudoers, resolv.conf, hosts, fstab
#############################################################################
[ "$verbose" ] && echo "ChrootCompile: Creating files at /System/Settings..."

function sudo_rm_if_e() {
   if [ -e "$1" ]
   then
      [ "$verbose" ] && echo "ChrootCompile: removing $1..."
      $sudo_exec rm -f "$1"
   else
      return 0
   fi
}

settingsdir=/System/Settings

sudo_rm_if_e $root/$settingsdir/passwd
cat <<EOF > $root/$settingsdir/passwd
gobo:x:0:0:Gobo:/Users/gobo:/bin/bash
fibo:x:21:21:Fibo:/tmp:/bin/bash
EOF

sudo_rm_if_e $root/$settingsdir/group
cat <<EOF > $root/$settingsdir/group
gobo:x:0:gobo
bin:x:1:
sys:x:2:gobo
tty:x:4:
fibo:x:21:fibo
EOF

hostname=`hostname`
sudo_rm_if_e $root/$settingsdir/hosts
cat <<EOF > $root/$settingsdir/hosts
127.0.0.1 localhost $hostname
EOF

sudo_rm_if_e $root/$programs/Sudo/Settings/sudoers
$sudo_exec chmod 777 $root/$programs/Sudo/Settings
cat <<EOF > $root/$programs/Sudo/Settings/sudoers
gobo ALL=(ALL) NOPASSWD: ALL
EOF
$sudo_exec chmod 755 $root/$programs/Sudo/Settings

$sudo_exec chmod 440 $root/$programs/Sudo/Settings/sudoers
$sudo_exec chown 0:0 $root/$programs/Sudo/Settings/sudoers
sudo_rm_if_e $root/System/Settings/sudoers
ln -nfs /$programs/Sudo/Settings/sudoers $root/$settingsdir/sudoers
touch $root/$settingsdir/fstab

# This should limit network access inside the chroot
#cp /etc/resolv.conf $root/$settingsdir/resolv.conf

#############################################################################
# Binding /dev, /proc and ./Archives inside root directory
#############################################################################
$sudo_exec mount --bind /dev $root/System/Kernel/Devices
$sudo_exec mount --bind /proc $root/System/Kernel/Status

[ -d ./Archives ] || mkdir ./Archives
[ ! "$localrepository" ] && $sudo_exec mount --bind Archives $root/Files/Compile/Archives

$sudo_exec mount --bind $hostgetclean $root/Depot/$hostgetclean
$sudo_exec mount --bind $targetgetclean $root/Depot/$targetgetclean

if [ "$crossopts" ]
then
    goboModules="/System/Kernel/Modules"
    mkdir -p $root/$crosstoolchaindir
    $sudo_exec mount --bind $crosstoolchaindir $root/$crosstoolchaindir
    if [ -d "$cross_prefix_dir/$goboModules" ]
    then $sudo_exec mount --bind $cross_prefix_dir/$goboModules $root/$cross_prefix_dir/$goboModules
    fi
fi

#############################################################################
# Download required archives to ./Archives
#############################################################################

Compile --batch --no-build ${crossopts} ${name} ${version} || Die "Fetching recipe(s) for ${name} ${version} failed"

#############################################################################
# Setting LD_LIBRARY_PATH variable which will be used on chrooted operations
#############################################################################
if Boolean "new-names"
then
   export LD_LIBRARY_PATH=/System/Index/lib
   export PATH=$PATH:/System/Index/bin:/System/Index/sbin
else
   export LD_LIBRARY_PATH=/System/Links/Libraries
fi

function in_chroot() {
   $sudo_exec chroot $root "$@"
}

[ "$verbose" ] && echo "ChrootCompile: Will run ldconfig..."
in_chroot ldconfig

if [ -e Directories.conf ]
then
   $sudo_exec cp Directories.conf $root/$programs/Scripts/Settings/Scripts/Directories.conf
fi

if ! [ "$chrootcompileMode" = "gobo" ]
then
   ln -nfs $crossprefixdir/Programs $root/View
fi

#############################################################################
# Let the compilation begin!
#############################################################################

# Only local packages are used to fullfil dependencies
$sudo_exec bash -c "echo 'defaultRepositories=( local_package )' > $root/$programs/Scripts/Settings/Scripts/FindPackage.conf"
$sudo_exec bash -c "echo 'defaultLocalPackagesPaths=( /Depot/$targetgetclean ; )' >> $root/$programs/Scripts/Settings/Scripts/GetAvailable.conf"

function check_dependencies() {
   [ "$verbose" ] && echo "ChrootCompile: Checking dependencies..."
   
   in_chroot CheckDependencies --no-web --add-self=never --mode=missing "$name" "$version" recipe | while read depnam depver deptyp depurl
   do
      [ "$depnam" ] || continue
      case $deptyp in
      installed)
         : # ok, skip
         ;;
      local_package)
         in_chroot InstallPackage --no-web $depurl || Die "Installation of dependency $depnam $depver failed ($depurl used)."
         ;;
      None)
         Die "ChrootCompile: Unresolved dependency: $depnam $depver"
         ;;
      *)
         Die "ChrootCompile: Dependency not available as a package: $depnam $depver ($deptype found)."
         ;;
      esac
   done
}

# disabled for now
# check_dependencies

echo "ChrootCompile: Will run Compile..."
unset failed
in_chroot Compile --batch --no-web --no-sign --no-postinstall --no-requirements $verbose $crossopts $name $version || failed=yes
if [ "$failed" ]
then
   if [ ! "$nodebug" ]
   then
      echo -en "\007"    
      echo "Compilation failed, invoking bash for debugging purposes."
      in_chroot /bin/bash
   fi
   Die "Finished with errors."
fi

#############################################################################
#  After the compilation is done,
#  pack the program and copy the resulting package to './$putclean', the place
#  of pure packages
#############################################################################

function in_target() {
   [ "$crossopts" ] && export goboCrossCompiling=yes
   $@
   ret=$?
   [ "$crossopts" ] && unset goboCrossCompiling
   return $ret
}

# FIXME: Should be based on Directories.conf
date=`date +%Y%m%d`
finalversion=$(echo $version | sed -e "s,^cvs.*,$date-CVS,1" -e "s,^svn.*,$date-SVN,1")
if [ "$chrootcompileMode" = "gobo" ]
then
   package=`in_target in_chroot CreatePackage --no-sign --no-verify $name $finalversion`
   [ $? -ne 0 ] && Die "Error on CreatePackage"
   mkdir -p $putclean
   cp -v $root/$name--$finalversion* $putclean
   $(Boolean no-sign) || SignProgram ${putclean}/${name}--${finalversion}*--*
else
   fullroot=`readlink -f $root`
   cd $root/View
   mkdir -p $fullroot/../$putclean/
   readlink -f $fullroot/../$putclean/$name--$finalversion--$targetarch.tar.bz2
   tar jcvpf $fullroot/../$putclean/$name--$finalversion--$targetarch.tar.bz2 $name/$finalversion
fi

# Remove the left over Area
cleanup
ret=$?
if [ -d "$root" ]
then 
   if [ $ret == 0 ]
   then rm -rf "$root"
   else Log_Normal "Will not remove $root as it appears to be still in use."
   fi
fi
