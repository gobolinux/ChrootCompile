#!/bin/bash
#############################################################################
# Imports
#############################################################################
source ScriptFunctions
Import GoboLinux
Import OptionParser
Import String

#############################################################################
# Setting options
#############################################################################
scriptCredits="Copyright (C) 2006 Andre Detsch. Released under the GNU GPL."
scriptUsage="[packages_list_file]"
scriptNotes="Default package list file is "`readlink -f "$scriptPath/../Data/PackagesList"`
Add_Option_Entry "s" "start-at"    "Start at a given package from the list." ""
Add_Option_Boolean "f" "force" "Force compilation of applications already in the store."
Add_Option_Boolean "r" "skip-revision" "Ignore revision strings on recipes."
Add_Option_Boolean "S" "no-sign" "Do not try to sign the resulting packages."
Add_Option_Boolean "W" "no-web" "Do not try to fetch recipes from the online repository."

Parse_Options "$@"

Parse_Conf ChrootCompile.conf

if [ "$(Arg 1)" ]
then
   listfile="$(Arg 1)"
else
   listfile=`readlink -f "$scriptPath/../Data/PackagesList"`
fi

[ -f "$listfile" ] || Die "'$listfile' is not an existing file."

[ "$chrootCompileDir" ] && cd "$chrootCompileDir"

# Save stdin in fd 6
exec 6<&0
succeededapps=""

startat="$(Entry start-at)"
[ ! -z "${startat}" ] && [ -z "$(grep -i ${startat} ${listfile})" ] && Die "${startat} not found in ${listfile}"
while read i; do
   name=$(echo $i | awk {'print $1'})
   version=$(echo $i | awk {'print $2'})

   if echo "${version:0:1}" | grep -q "^#"
   then unset version
   fi
   [ "$(Downcase ${startat})" = "$(Downcase ${name})" ] && startat=
   echo "$name" | grep -q "^#" || [ "$startat" -o ! "$name" ] && continue
   [ "$name" = "exit" ] && break

   if ! Boolean "no-web"
   then
      recipe=$(GetRecipe ${name} ${version})
      name=$(Get_Token "${recipe}" "/" "-2")
      versionandrevision=$(Get_Token "${recipe}" "/" "-1")
   else
      versionandrevision="${version}"
      recipe="${name} ${version}"
   fi
   
   Boolean "skip-revision" && versionandrevision="$(String_Version ${versionandrevision})"
   
   if Quiet ls Clean/i686/${name}--${versionandrevision}* && ! Boolean "force"
   then 
      echo "Skipping ${name} ($(ls Clean/i686/${name}--${versionandrevision}*))"
   else 
      echo "Processing ${name} ${versionandrevision}..."
      time nice -20 ChrootCompile --local-repository --no-sign ${recipe}
      if [ $? -gt 0 ]
      then
         echo -en "\007"; 
         Ask_Continue "Compilation of $name failed. Proceed to next program?" 0<&6 
      else
         succeededapps=(${succeededapps[@]} "${name}--${versionandrevision}")
      fi
   fi
done < ${listfile}

! Boolean "no-sign" && [ ! -z "${succeededapps}" ] && {
for app in ${succeededapps[@]}
do
   SignProgram Clean/i686/$app--i686.tar.bz2
done
}

# Restore stdin from fd 6
exec 0<&6 6<&-
