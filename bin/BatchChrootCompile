#!/bin/bash
#############################################################################
# Imports
#############################################################################
source ScriptFunctions
Import GoboLinux
Import OptionParser
Import String

#############################################################################
# Setting options
#############################################################################
scriptCredits="Copyright (C) 2006 Andre Detsch. Released under the GNU GPL."
scriptUsage="[packages_list_file]"
scriptNotes="Default package list file is "`readlink -f "$scriptPath/../Data/PackagesList"`
Add_Option_Entry "s" "start-at"    "Start at a given package from the list." ""
Add_Option_Boolean "f" "force" "Force compilation of applications already in the store."
Add_Option_Boolean "n" "new-names" "Compile using new names from /System/Index hierarchy." ""
Add_Option_Boolean "t" "use-tmpfs" "Uncompress and build sources on tmpfs. Contents will be discarded after compilation finishes." ""
Add_Option_Boolean "R" "skip-revision" "Ignore revision strings on recipes."
Add_Option_Boolean "S" "no-sign" "Do not try to sign the resulting packages."
Add_Option_Boolean "W" "no-web" "Do not download precompiled packages from the web when Dependencies are not found." ""
Add_Option_Boolean "C" "no-recursive" "Do not recursively ChrootCompile dependencies that doesn't have a package." ""
Add_Option_Entry "d" "use-directory" "Use specified directory as root for ChrootCompile." ""

Parse_Options "$@"

Parse_Conf ChrootCompile.conf

Boolean "no-web" && noweb="--no-web"
Boolean "no-recursive" && norecursive="--no-recursive"
Boolean "new-names" && newnames="--new-names"
Boolean "use-tmpfs" && tmpfs="--use-tmpfs"
if [ -n "$(Entry "use-directory")" ]
then chrootCompileDir="$(Entry "use-directory")"
else [ -z "$chrootCompileDir" ] && chrootCompileDir="$PWD"
fi

if [ "$(Arg 1)" ]
then
   listfile="$(Arg 1)"
else
   listfile=`readlink -f "$scriptPath/../Data/PackagesList"`
fi

[ -f "$listfile" ] || Die "'$listfile' is not an existing file."

[ "$chrootCompileDir" ] && cd "$chrootCompileDir"

# Save stdin in fd 6
exec 6<&0
succeededapps=""

function cleanup() {
   ! Boolean "no-sign" && [ ! -z "${succeededapps}" ] && {
   for app in ${succeededapps[@]}
   do
      SignProgram "$chrootCompileDir"/Clean/i686/$app--i686.tar.bz2
   done
   }
   # Restore stdin from fd 6
   exec 0<&6 6<&-
   exit
}

trap "cleanup 'Exiting...'" SIGHUP SIGINT SIGTERM

startat="$(Entry start-at)"
[ ! -z "${startat}" ] && [ -z "$(grep -i -E -e "^\W*${startat}(\W|$)" ${listfile})" ] && Die "${startat} not found in ${listfile}"
while read i; do
   name=$(echo $i | awk {'print $1'})
   version=$(echo $i | awk {'print $2'})

   if echo "${version:0:1}" | grep -q "^#"
   then unset version
   fi
   [ "$(Downcase ${startat})" = "$(Downcase ${name})" ] && startat=
   echo "$name" | grep -q "^#" || [ "$startat" -o ! "$name" ] && continue
   [ "$name" = "exit" ] && break

   if Boolean "skip-revision"
   then
      versionandrevision="${version}"
   else
      recipe=$(GetRecipe ${name} ${version})
      [ -n "${recipe}" ] && name=$(Get_Token "${recipe}" "/" "-2")
      [ -n "${recipe}" ] && versionandrevision=$(Get_Token "${recipe}" "/" "-1")
   fi
   [ -z "${recipe}" ] && Ask_Continue "No recipe for $name could be found. Proceed to next program?" 0<&6

   if Quiet ls "$chrootCompileDir"/Clean/i686/${name}--${versionandrevision}* && ! Boolean "force"
   then 
      echo "Skipping ${name} ($(ls Clean/i686/${name}--${versionandrevision}*))"
      continue
   fi

   echo "Processing ${name} ${versionandrevision}..."
   Boolean "skip-revision" && recipe=$(GetRecipe ${name} ${version})
   time nice -20 ChrootCompile --local-repository --no-sign ${noweb:+${noweb}} ${norecursive:+${norecursive}} ${newnames:+${newnames}} ${tmpfs:+${tmpfs}} --use-directory="$chrootCompileDir" ${recipe} 0<&6
   if [ $? -gt 0 ]
   then
      echo -en "\007"; 
      Ask_Continue "Compilation of $name failed. Proceed to next program?" 0<&6 
   else
      succeededapps=(${succeededapps[@]} "${name}--${versionandrevision}")
   fi
done < ${listfile}

cleanup
