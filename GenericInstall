#!/bin/sh

source ScriptFunctions
Import File
Import GoboLinux
Import Log
Import OptionParser
Import Process

### Changelog #################################################################



### Options ###################################################################

scriptDescription="Install GoboLinux packages or recipes."
scriptCredits="Released under the GNU GPL."
helpOnNoArguments=yes
scriptUsage="<package_file>|<package_dir>"
scriptExample="Gimp--2.0.5.tar.gz"
# Add_Option_Boolean "b" "batch" "Do not ask for confirmation."
# Add_Option_Boolean "D" "no-dependencies" "Do not try to fullfit dependencies."
# Add_Option_Boolean "I" "no-install" "Do not install, only locate and fetch the package.
#         Automatically enables '--keep'"
# Add_Option_Boolean "k" "keep" "Do not remove downloaded packages."
# Add_Option_Entry "s" "same" "What to do when unpackaging over the same version,
#         'keep', 'remove', 'ask' or 'cancel'." "ask"
# Add_Option_Entry "o" "old" "What to do with a previously existing
#         version of a package if found, 'keep', 'remove', 'ask' or 'cancel'." "keep"
# Add_Option_Boolean "W" "no-web" "Do not check remote site for packages, and bypass fetching of archives."
  
Parse_Options "$@"
shift $parsedArguments

### Operation #################################################################

# if [ "$goboInstall" = "" ]
# then
#     export goboInstall="$goboPrograms"
# fi

# Boolean "batch"      && batch="--batch"
# Boolean "keep"       && keep="--keep"
# Boolean "no-install" && noinstall="--no-install" && keep="--keep"
# Is_Writable "${goboPrograms}" || Verify_Superuser
# Is_Writable "${goboInstall}"  || Verify_Superuser

if Is_URL "$1" || [ -f "$1" ] # URL or file
then
	filename=`Get_Token "$1" "/" "-1"`
	filename=`basename "$filename" ".tar.bz2"`
	p=`Get_Token "$filename" "--" "0"`
	v=`Get_Token "$filename" "--" "1"`
	t=`Get_Token "$filename" "--" "2"`
	u="$1"
	if [ "$t" != "recipe" ] 
	then
		if Is_URL "$1"
		then	
			if echo $1 | grep 'packages/official'
			then
				t="official_package"
			else
				t="contrib_package"
			fi
		else
			t="local_package"
		fi
	fi
elif [ -d "$1" ] # directory
then
	if [ -f "$1/Recipe" ]
	then
		t="recipe"
	else
		t="local_package"
	fi
	u=`readlink -f "$1"`
	v=`basename "$u"`
	temp=`dirname "$u"`
	p=`basename "$temp"`
else # program name [version] [type] [url]
	p="$1"
	v="$2"
	t="$3"
	u="$4"
fi

#CheckDependencies --add-self=always --mode missing $p $v $t $u 
#echo 

CheckDependencies --add-self=always --mode missing $p "$v" $t $u | while read line
do
	echo $line
	if [ "$line" != "" ]
	then
		p=`echo $line | cut -f1  -d' '`
		v=`echo $line | cut -f2  -d' '`
		t=`echo $line | cut -f3  -d' '`
		u=`echo $line | cut -f4- -d' '`
		if [ "$t" = "None" ]
		then
			echo Unsolved dependency: $p $v
			continue
		fi
		
		if [ "$t" = "recipe" ]
		then
			Compile --no-sign $u
		else
			InstallPackage $u
		fi
	fi
done

